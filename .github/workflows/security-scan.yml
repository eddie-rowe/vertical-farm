name: Security Scanning

on:
  workflow_call:
    outputs:
      security_status:
        description: "Overall security scan status"
        value: ${{ jobs.unified-security.outputs.status }}
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  security-events: write
  actions: read

env:
  NODE_VERSION: '22'
  PYTHON_VERSION: '3.13'

jobs:
  unified-security:
    name: Unified Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    outputs:
      status: ${{ steps.security-assessment.outputs.status }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # =============================================================================
      # REPOSITORY-WIDE SECURITY CHECKS
      # =============================================================================
      
      - name: Repository-wide Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
      
      # =============================================================================
      # FRONTEND SECURITY SETUP
      # =============================================================================
      
      - name: Set up Node.js for Frontend Analysis
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: |
          npm ci
      
      # =============================================================================
      # BACKEND SECURITY SETUP  
      # =============================================================================
      
      - name: Set up Python for Backend Analysis
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Backend Dependencies and Security Tools
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -e .[all,test]
          pip install bandit safety pip-licenses detect-secrets
      
      # =============================================================================
      # LICENSE COMPLIANCE (BOTH SYSTEMS)
      # =============================================================================
      
      - name: Frontend License Compliance
        working-directory: ./frontend
        run: |
          # Install license-checker globally
          npm install -g license-checker
          
          echo "## 📄 Frontend License Compliance" >> $GITHUB_STEP_SUMMARY
          
          # Generate license reports
          license-checker --production --json > frontend-licenses.json
          license-checker --production --csv > frontend-licenses.csv
          
          # Check for problematic licenses (don't fail build)
          license-checker --production --failOn "GPL-2.0;GPL-3.0;AGPL-3.0;LGPL-2.1;LGPL-3.0" || echo "⚠️ Problematic frontend licenses detected"
          
          if [ -f frontend-licenses.json ]; then
            TOTAL_DEPS=$(jq 'keys | length' frontend-licenses.json 2>/dev/null || echo "unknown")
            echo "- **Frontend dependencies analyzed**: $TOTAL_DEPS" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Backend License Compliance
        working-directory: ./backend
        run: |
          echo "## 📄 Backend License Compliance" >> $GITHUB_STEP_SUMMARY
          
          # Generate license reports
          pip-licenses --format=json --with-license-file --output-file=backend-licenses.json
          pip-licenses --format=csv --output-file=backend-licenses.csv
          
          # Check for problematic licenses (don't fail build)
          pip-licenses --fail-on GPL-2.0,GPL-3.0,AGPL-3.0 || echo "⚠️ Problematic backend licenses detected"
          
          if [ -f backend-licenses.json ]; then
            TOTAL_DEPS=$(jq 'length' backend-licenses.json 2>/dev/null || echo "unknown")
            echo "- **Backend dependencies analyzed**: $TOTAL_DEPS" >> $GITHUB_STEP_SUMMARY
          fi
      
      # =============================================================================
      # DEPENDENCY SECURITY SCANNING
      # =============================================================================
      
      - name: Frontend Dependency Security Scan
        working-directory: ./frontend
        run: |
          echo "## 🔍 Frontend Dependency Security" >> $GITHUB_STEP_SUMMARY
          
          # npm audit with detailed output
          npm audit --audit-level=moderate --json > frontend-npm-audit.json || true
          npm audit --audit-level=moderate || echo "Frontend dependencies have vulnerabilities"
          
          # Check for outdated packages
          npm outdated --json > frontend-outdated.json || true
          
          # Snyk scan (if token available)
          if [ "${{ secrets.SNYK_TOKEN }}" != "" ]; then
            npx snyk test --json > frontend-snyk-report.json || true
            npx snyk monitor --project-name="vertical-farm-frontend" || true
            echo "- **Snyk scan**: Completed for frontend" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Snyk scan**: Skipped (no token)" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Analyze audit results
          if [ -f frontend-npm-audit.json ]; then
            CRITICAL=$(jq '.metadata.vulnerabilities.critical // 0' frontend-npm-audit.json)
            HIGH=$(jq '.metadata.vulnerabilities.high // 0' frontend-npm-audit.json)
            echo "- **Frontend Critical vulnerabilities**: $CRITICAL" >> $GITHUB_STEP_SUMMARY
            echo "- **Frontend High vulnerabilities**: $HIGH" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Backend Dependency Security Scan
        working-directory: ./backend
        run: |
          echo "## 🔍 Backend Dependency Security" >> $GITHUB_STEP_SUMMARY
          
          # Safety scan for Python dependencies
          safety check --json --output backend-safety-report.json || true
          safety check || echo "Backend dependencies have vulnerabilities"
          
          # Analyze safety results
          if [ -f backend-safety-report.json ]; then
            CRITICAL_COUNT=$(jq '.vulnerabilities | length' backend-safety-report.json 2>/dev/null || echo "0")
            echo "- **Backend Critical vulnerabilities**: $CRITICAL_COUNT" >> $GITHUB_STEP_SUMMARY
            
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "⚠️ Critical backend vulnerabilities found:" >> $GITHUB_STEP_SUMMARY
              jq -r '.vulnerabilities[] | "- \(.package_name) \(.installed_version): \(.vulnerability.cve // "No CVE")"' backend-safety-report.json | head -5 >> $GITHUB_STEP_SUMMARY
            fi
          fi
      
      # =============================================================================
      # STATIC APPLICATION SECURITY TESTING (SAST)
      # =============================================================================
      
      - name: Frontend SAST (ESLint Security)
        working-directory: ./frontend
        run: |
          echo "## 🛡️ Frontend SAST Analysis" >> $GITHUB_STEP_SUMMARY
          
          # ESLint security scan
          npx eslint . \
            --ext .js,.jsx,.ts,.tsx \
            --format @microsoft/eslint-formatter-sarif \
            --output-file frontend-eslint-security.sarif || true
          
          # Count security issues
          if [ -f frontend-eslint-security.sarif ]; then
            ESLINT_ISSUES=$(jq '.runs[0].results | length' frontend-eslint-security.sarif 2>/dev/null || echo "0")
            echo "- **ESLint security issues**: $ESLINT_ISSUES" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Backend SAST (Bandit)
        working-directory: ./backend
        run: |
          echo "## 🛡️ Backend SAST Analysis" >> $GITHUB_STEP_SUMMARY
          
          # Bandit security scan
          bandit -r app/ -f json -o backend-bandit-report.json || true
          bandit -r app/ -f sarif -o backend-bandit-report.sarif || true
          
          # Analyze bandit results
          if [ -f backend-bandit-report.json ]; then
            HIGH_COUNT=$(jq '.metrics._totals.SEVERITY.HIGH // 0' backend-bandit-report.json)
            MEDIUM_COUNT=$(jq '.metrics._totals.SEVERITY.MEDIUM // 0' backend-bandit-report.json)
            echo "- **Bandit High severity**: $HIGH_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- **Bandit Medium severity**: $MEDIUM_COUNT" >> $GITHUB_STEP_SUMMARY
          fi
      
      # =============================================================================
      # SECURITY REPORTING & UPLOADS
      # =============================================================================
      
      - name: Upload Frontend ESLint Security Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: frontend/frontend-eslint-security.sarif
          category: frontend-security
      
      - name: Upload Backend Bandit Security Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: backend/backend-bandit-report.sarif
          category: backend-security
      
      - name: Upload Unified Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unified-security-reports
          path: |
            frontend/frontend-licenses.json
            frontend/frontend-licenses.csv
            frontend/frontend-npm-audit.json
            frontend/frontend-outdated.json
            frontend/frontend-snyk-report.json
            frontend/frontend-eslint-security.sarif
            backend/backend-licenses.json
            backend/backend-licenses.csv
            backend/backend-safety-report.json
            backend/backend-bandit-report.json
            backend/backend-bandit-report.sarif
          retention-days: 30
      
      # =============================================================================
      # SECURITY ASSESSMENT & GATING
      # =============================================================================
      
      - name: Security Assessment and Gating
        id: security-assessment
        run: |
          echo "## 🎯 Unified Security Assessment" >> $GITHUB_STEP_SUMMARY
          
          # Initialize counters
          CRITICAL_ISSUES=0
          HIGH_ISSUES=0
          WARNINGS=0
          
          # Check frontend critical vulnerabilities
          if [ -f frontend/frontend-npm-audit.json ]; then
            FRONTEND_CRITICAL=$(jq '.metadata.vulnerabilities.critical // 0' frontend/frontend-npm-audit.json)
            FRONTEND_HIGH=$(jq '.metadata.vulnerabilities.high // 0' frontend/frontend-npm-audit.json)
            CRITICAL_ISSUES=$((CRITICAL_ISSUES + FRONTEND_CRITICAL))
            HIGH_ISSUES=$((HIGH_ISSUES + FRONTEND_HIGH))
          fi
          
          # Check backend critical vulnerabilities
          if [ -f backend/backend-safety-report.json ]; then
            BACKEND_CRITICAL=$(jq '.vulnerabilities | length' backend/backend-safety-report.json 2>/dev/null || echo "0")
            CRITICAL_ISSUES=$((CRITICAL_ISSUES + BACKEND_CRITICAL))
          fi
          
          # Check bandit high severity issues
          if [ -f backend/backend-bandit-report.json ]; then
            BANDIT_HIGH=$(jq '.metrics._totals.SEVERITY.HIGH // 0' backend/backend-bandit-report.json)
            HIGH_ISSUES=$((HIGH_ISSUES + BANDIT_HIGH))
          fi
          
          # Create summary table
          echo "| Security Category | Critical | High | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------------|----------|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Dependencies | ${FRONTEND_CRITICAL:-0} | ${FRONTEND_HIGH:-0} | ${FRONTEND_CRITICAL:-0} -eq 0 && echo '✅' || echo '❌' |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Dependencies | ${BACKEND_CRITICAL:-0} | - | ${BACKEND_CRITICAL:-0} -eq 0 && echo '✅' || echo '❌' |" >> $GITHUB_STEP_SUMMARY
          echo "| SAST Analysis | - | ${BANDIT_HIGH:-0} | ${BANDIT_HIGH:-0} -le 2 && echo '✅' || echo '⚠️' |" >> $GITHUB_STEP_SUMMARY
          echo "| **Total** | **$CRITICAL_ISSUES** | **$HIGH_ISSUES** | - |" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall status
          if [ "$CRITICAL_ISSUES" -gt 0 ]; then
            echo "status=critical" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **SECURITY GATE: FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "Critical security vulnerabilities must be resolved before deployment." >> $GITHUB_STEP_SUMMARY
            exit 1
          elif [ "$HIGH_ISSUES" -gt 10 ]; then
            echo "status=warning" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **SECURITY GATE: WARNING**" >> $GITHUB_STEP_SUMMARY
            echo "High number of high-severity issues detected ($HIGH_ISSUES). Consider addressing before deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "status=passed" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **SECURITY GATE: PASSED**" >> $GITHUB_STEP_SUMMARY
            echo "No critical security issues detected. Ready for deployment." >> $GITHUB_STEP_SUMMARY
          fi
          
          # Output for other workflows
          echo "Critical security issues: $CRITICAL_ISSUES"
          echo "High security issues: $HIGH_ISSUES" 