name: Main CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: false
        type: boolean
      deploy_environment:
        description: 'Environment to deploy to'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging

permissions:
  contents: write
  packages: write
  security-events: write
  issues: write
  pull-requests: write
  actions: write
  pages: write
  id-token: write
  checks: write

jobs:
  # Phase 1: Parallel Testing & Security by Technology Stack
  backend-tests:
    name: Backend Tests
    uses: ./.github/workflows/test-backend.yml
    secrets: inherit
  
  frontend-tests:
    name: Frontend Tests
    uses: ./.github/workflows/test-frontend.yml
    secrets: inherit
  
  backend-security:
    name: Backend Security Scan
    uses: ./.github/workflows/security-scan-backend.yml
    secrets: inherit
  
  frontend-security:
    name: Frontend Security Scan
    uses: ./.github/workflows/security-scan-frontend.yml
    secrets: inherit
  
  repository-security:
    name: Repository Security Scan
    uses: ./.github/workflows/security-scan-repository.yml
    secrets: inherit

  # Phase 2: Technology-Specific Builds (Enhanced Parallel Dependencies)
  backend-build:
    name: Backend Build
    uses: ./.github/workflows/build-backend.yml
    needs: [backend-tests, frontend-tests, backend-security, repository-security]
    if: |
      needs.backend-tests.result == 'success' && 
      needs.frontend-tests.result == 'success' && 
      needs.backend-security.result == 'success' && 
      needs.repository-security.result == 'success'
    secrets: inherit
    #with:
    #  push_to_registry: ${{ github.event_name != 'pull_request' }}
  
  frontend-build:
    name: Frontend Build
    uses: ./.github/workflows/build-frontend.yml
    needs: [backend-tests, frontend-tests, frontend-security, repository-security]
    if: |
      needs.backend-tests.result == 'success' && 
      needs.frontend-tests.result == 'success' && 
      needs.frontend-security.result == 'success' && 
      needs.repository-security.result == 'success'
    secrets: inherit
    #with:
    #  push_to_registry: ${{ github.event_name != 'pull_request' }}
  
  docs-build:
    name: Documentation Site Build
    uses: ./.github/workflows/build-docs-site.yml
    needs: [backend-tests, frontend-tests, repository-security]
    if: |
      needs.backend-tests.result == 'success' && 
      needs.frontend-tests.result == 'success' && 
      needs.repository-security.result == 'success'
    secrets: inherit
    #with:
    #  deploy_to_pages: ${{ github.ref == 'refs/heads/main' }}
  
  # Phase 3: Database Deployment (after builds complete)
  #supabase-deploy:
  #  name: Supabase Deploy
  #  uses: ./.github/workflows/deploy/supabase-deploy.yml
  #  needs: [backend-build, frontend-build]
  #  if: |
  #    always() && 
  #    github.ref == 'refs/heads/main' && 
  #    (needs.backend-build.result == 'success' && needs.frontend-build.result == 'success')
  #  secrets: inherit
  
  # Phase 4: Unraid Deployment (requires successful builds and tests)
  unraid-deploy:
    name: Unraid Deploy
    uses: ./.github/workflows/deploy-unraid.yml
    needs: [backend-build, frontend-build]
    if: needs.backend-build.result == 'success' && needs.frontend-build.result == 'success' && github.ref == 'refs/heads/main'
    secrets: inherit
    #with:
      #environment: ${{ inputs.deploy_environment || 'production' }}
      #backend_image: ${{ needs.backend-build.outputs.image_tag }}
      #frontend_image: ${{ needs.frontend-build.outputs.image_tag }}

  # Phase 5-alternative: Production Deployment
  #production-deploy:
  #  name: Production Deploy
  #  uses: ./.github/workflows/deploy/production-deploy.yml
  #  needs: [supabase-deploy]
  #  if: |
  #    always() && 
  #    github.ref == 'refs/heads/main' && 
  #    needs.supabase-deploy.result == 'success'
  #  secrets: inherit
  #  with:
  #    force_deploy: ${{ inputs.force_deploy }}
  
  # Phase 6: Edge Deployment (after Production)
  #cloudflare-deploy:
  #  name: Cloudflare Deploy
  #  uses: ./.github/workflows/deploy/cloudflare-deploy.yml
  #  needs: [production-deploy]
  #  if: |
  #    always() && 
  #    github.ref == 'refs/heads/main' && 
  #    needs.production-deploy.result == 'success'
  #  secrets: inherit
  #  with:
  #    environment: ${{ inputs.deploy_environment }}
  
  # Summary Job (includes all test results)
  pipeline-summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [
      backend-tests,
      frontend-tests,
      backend-security,
      frontend-security,
      repository-security,
      backend-build,
      frontend-build,
      docs-build,
      unraid-deploy
      #supabase-deploy,
      #production-deploy,
      #cloudflare-deploy
    ]
    if: always()
    
    steps:
      - name: Generate pipeline summary
        env:
          BACKEND_TESTS_RESULT: ${{ needs.backend-tests.result }}
          FRONTEND_TESTS_RESULT: ${{ needs.frontend-tests.result }}
          BACKEND_SECURITY_RESULT: ${{ needs.backend-security.result }}
          FRONTEND_SECURITY_RESULT: ${{ needs.frontend-security.result }}
          REPOSITORY_SECURITY_RESULT: ${{ needs.repository-security.result }}
          BACKEND_BUILD_RESULT: ${{ needs.backend-build.result }}
          FRONTEND_BUILD_RESULT: ${{ needs.frontend-build.result }}
          DOCS_BUILD_RESULT: ${{ needs.docs-build.result }}
          UNRAID_DEPLOY_RESULT: ${{ needs.unraid-deploy.result }}
          SUPABASE_DEPLOY_RESULT: ${{ needs.supabase-deploy.result }}
          PRODUCTION_DEPLOY_RESULT: ${{ needs.production-deploy.result }}
          CLOUDFLARE_DEPLOY_RESULT: ${{ needs.cloudflare-deploy.result }}
          EVENT_NAME: ${{ github.event_name }}
          HEAD_REF: ${{ github.head_ref }}
          BASE_REF: ${{ github.base_ref }}
        run: |
          echo "# üöÄ CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Pipeline Overview
          echo "## üìä Pipeline Overview" >> $GITHUB_STEP_SUMMARY
          echo "| Phase | Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Function to get status icon
          get_status_icon() {
            case "$1" in
              success) echo "‚úÖ" ;;
              failure) echo "‚ùå" ;;
              skipped) echo "‚è≠Ô∏è" ;;
              *) echo "‚è∏Ô∏è" ;;
            esac
          }
          
          # Phase 1: Testing & Security
          echo "| üß™ Testing | Backend Tests | $(get_status_icon "$BACKEND_TESTS_RESULT") |" >> $GITHUB_STEP_SUMMARY
          echo "| üß™ Testing | Frontend Tests | $(get_status_icon "$FRONTEND_TESTS_RESULT") |" >> $GITHUB_STEP_SUMMARY
          echo "| üõ°Ô∏è Security | Backend Security Scan | $(get_status_icon "$BACKEND_SECURITY_RESULT") |" >> $GITHUB_STEP_SUMMARY
          echo "| üõ°Ô∏è Security | Frontend Security Scan | $(get_status_icon "$FRONTEND_SECURITY_RESULT") |" >> $GITHUB_STEP_SUMMARY
          echo "| üõ°Ô∏è Security | Repository Security Scan | $(get_status_icon "$REPOSITORY_SECURITY_RESULT") |" >> $GITHUB_STEP_SUMMARY
          
          # Phase 2: Building
          echo "| üèóÔ∏è Building | Backend Build | $(get_status_icon "$BACKEND_BUILD_RESULT") |" >> $GITHUB_STEP_SUMMARY
          echo "| üèóÔ∏è Building | Frontend Build | $(get_status_icon "$FRONTEND_BUILD_RESULT") |" >> $GITHUB_STEP_SUMMARY
          echo "| üèóÔ∏è Building | Documentation | $(get_status_icon "$DOCS_BUILD_RESULT") |" >> $GITHUB_STEP_SUMMARY
          
          # Phase 3: Deployment
          echo "| üöÄ Deploy | Unraid | $(get_status_icon "$UNRAID_DEPLOY_RESULT") |" >> $GITHUB_STEP_SUMMARY
          echo "| üöÄ Deploy | Supabase | $(get_status_icon "$SUPABASE_DEPLOY_RESULT") |" >> $GITHUB_STEP_SUMMARY
          echo "| üöÄ Deploy | Production | $(get_status_icon "$PRODUCTION_DEPLOY_RESULT") |" >> $GITHUB_STEP_SUMMARY
          echo "| üöÄ Deploy | Cloudflare | $(get_status_icon "$CLOUDFLARE_DEPLOY_RESULT") |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Test Coverage Information
          echo "## üìà Test Coverage" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.backend-tests.result }}" == "success" ]]; then
            echo "- **Backend Coverage**: ‚úÖ Available in test artifacts and Codecov" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ "${{ needs.frontend-tests.result }}" == "success" ]]; then
            echo "- **Frontend Coverage**: ‚úÖ Available in test artifacts and Codecov" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall Status
          if [[ "${{ needs.backend-tests.result }}" == "success" && "${{ needs.frontend-tests.result }}" == "success" ]]; then
            TEST_STATUS="‚úÖ All tests passed"
          else
            TEST_STATUS="‚ùå Some tests failed"
          fi
          
          # Enhanced Security Status
          if [[ "${{ needs.backend-security.result }}" == "success" && "${{ needs.frontend-security.result }}" == "success" && "${{ needs.repository-security.result }}" == "success" ]]; then
            SECURITY_STATUS="‚úÖ All security scans passed"
          else
            SECURITY_STATUS="‚ùå Some security scans failed"
          fi
          
          if [[ "${{ needs.backend-build.result }}" == "success" && "${{ needs.frontend-build.result }}" == "success" ]]; then
            BUILD_STATUS="‚úÖ All builds successful"
          else
            BUILD_STATUS="‚ùå Some builds failed"
          fi
          
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            if [[ "${{ needs.unraid-deploy.result }}" == "success" ]]; then
              DEPLOY_STATUS="‚úÖ Unraid deployment successful"
            elif [[ "${{ needs.cloudflare-deploy.result }}" == "success" ]]; then
              DEPLOY_STATUS="‚úÖ Full deployment successful"
            elif [[ "${{ needs.production-deploy.result }}" == "success" ]]; then
              DEPLOY_STATUS="‚ö†Ô∏è Partial deployment (Cloudflare failed)"
            elif [[ "${{ needs.supabase-deploy.result }}" == "success" ]]; then
              DEPLOY_STATUS="‚ö†Ô∏è Database only (Production failed)"
            else
              DEPLOY_STATUS="‚ùå Deployment failed"
            fi
          else
            DEPLOY_STATUS="‚è≠Ô∏è No deployment (not main branch)"
          fi
          
          echo "## üéØ Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests**: $TEST_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "- **Security**: $SECURITY_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "- **Builds**: $BUILD_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment**: $DEPLOY_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Enhanced Quality Gates Status (Technology-Specific)
          echo "## üõ°Ô∏è Quality Gates" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.backend-tests.result }}" == "success" && "${{ needs.backend-security.result }}" == "success" ]]; then
            echo "- ‚úÖ Backend quality gate: PASSED (tests + security)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå Backend quality gate: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.frontend-tests.result }}" == "success" && "${{ needs.frontend-security.result }}" == "success" ]]; then
            echo "- ‚úÖ Frontend quality gate: PASSED (tests + security)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå Frontend quality gate: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.repository-security.result }}" == "success" ]]; then
            echo "- ‚úÖ Repository security gate: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå Repository security gate: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Security Testing Summary
          echo "## üõ°Ô∏è Security Testing" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend Security**: Secret scanning, SAST (Bandit), dependency scanning" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend Security**: Secret scanning, license compliance, dependency analysis" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Reports**: Available in GitHub Security tab and artifacts" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Branch-specific information
          if [[ "$EVENT_NAME" == "pull_request" ]]; then
            echo "## üìã Pull Request Summary" >> $GITHUB_STEP_SUMMARY
            echo "This is a pull request build. Deployment was skipped." >> $GITHUB_STEP_SUMMARY
            echo "- **Branch**: $HEAD_REF" >> $GITHUB_STEP_SUMMARY
            echo "- **Target**: $BASE_REF" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "## üåü Production Deployment" >> $GITHUB_STEP_SUMMARY
            echo "This build was deployed to production." >> $GITHUB_STEP_SUMMARY
            echo "- **Frontend**: https://vertical-farm.goodgoodgreens.org" >> $GITHUB_STEP_SUMMARY
            echo "- **API**: https://vertical-farm-api.goodgoodgreens.org" >> $GITHUB_STEP_SUMMARY
            echo "- **Docs**: https://docs.goodgoodgreens.org" >> $GITHUB_STEP_SUMMARY
          else
            echo "## üîß Development Build" >> $GITHUB_STEP_SUMMARY
            echo "This is a development branch build." >> $GITHUB_STEP_SUMMARY
            echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build completed at**: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY
      
      - name: Check pipeline health
        env:
          BACKEND_TESTS_RESULT: ${{ needs.backend-tests.result }}
          FRONTEND_TESTS_RESULT: ${{ needs.frontend-tests.result }}
          BACKEND_BUILD_RESULT: ${{ needs.backend-build.result }}
          FRONTEND_BUILD_RESULT: ${{ needs.frontend-build.result }}
          SUPABASE_DEPLOY_RESULT: ${{ needs.supabase-deploy.result }}
          SKIP_TESTS: ${{ inputs.skip_tests }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          # Determine overall pipeline success
          CRITICAL_FAILURES=0
          
          # Check critical test failures (unless skipped)
          if [[ "$BACKEND_TESTS_RESULT" == "failure" ]] && [[ "$SKIP_TESTS" != "true" ]]; then
            echo "‚ùå Backend tests failed"
            CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
          fi
          
          if [[ "$FRONTEND_TESTS_RESULT" == "failure" ]] && [[ "$SKIP_TESTS" != "true" ]]; then
            echo "‚ùå Frontend tests failed"
            CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
          fi
          
          # Check critical build failures
          if [[ "$BACKEND_BUILD_RESULT" == "failure" ]]; then
            echo "‚ùå Backend build failed"
            CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
          fi
          
          if [[ "$FRONTEND_BUILD_RESULT" == "failure" ]]; then
            echo "‚ùå Frontend build failed"
            CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
          fi
          
          # Check deployment failures on main branch
          if [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
            if [[ "$SUPABASE_DEPLOY_RESULT" == "failure" ]]; then
              echo "‚ùå Supabase deployment failed"
              CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
            fi
          fi
          
          echo "Critical failures detected: $CRITICAL_FAILURES"
          
          if [ $CRITICAL_FAILURES -gt 0 ]; then
            echo "‚ùå Pipeline has critical failures"
            exit 1
          else
            echo "‚úÖ Pipeline completed successfully"
          fi 