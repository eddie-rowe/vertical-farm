name: Main CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: false
        type: boolean
      deploy_environment:
        description: 'Environment to deploy to'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging

permissions:
  contents: write
  packages: write
  security-events: write
  issues: write
  pull-requests: write
  actions: write
  pages: write
  id-token: write

jobs:
  # Phase 1: Parallel Testing (MUST PASS FIRST)
  backend-tests:
    name: Backend Tests
    uses: ./.github/workflows/test-backend.yml
    if: inputs.skip_tests != true
    secrets: inherit
  
  frontend-tests:
    name: Frontend Tests
    uses: ./.github/workflows/test-frontend.yml
    if: inputs.skip_tests != true
    secrets: inherit
  
  # Phase 2: Parallel Building (after tests pass)
  backend-build:
    name: Backend Build
    uses: ./.github/workflows/build-backend.yml
    needs: [backend-tests]
    if: always() && (needs.backend-tests.result == 'success' || inputs.skip_tests == true)
    secrets: inherit
    #with:
    #  push_to_registry: ${{ github.event_name != 'pull_request' }}
  
  frontend-build:
    name: Frontend Build
    uses: ./.github/workflows/build-frontend.yml
    needs: [frontend-tests]
    if: always() && (needs.frontend-tests.result == 'success' || inputs.skip_tests == true)
    secrets: inherit
    #with:
    #  push_to_registry: ${{ github.event_name != 'pull_request' }}
  
  docs-build:
    name: Documentation Site Build
    uses: ./.github/workflows/build-docs-site.yml
    # Docs build doesn't depend on tests unless docs are changed
    #if: github.event_name != 'pull_request' || contains(github.event.pull_request.changed_files, 'docs/')
    secrets: inherit
    #with:
    #  deploy_to_pages: ${{ github.ref == 'refs/heads/main' }}
  
  # Phase 3: Database Deployment (after builds complete)
  #supabase-deploy:
  #  name: Supabase Deploy
  #  uses: ./.github/workflows/deploy/supabase-deploy.yml
  #  needs: [backend-build, frontend-build]
  #  if: |
  #    always() && 
  #    github.ref == 'refs/heads/main' && 
  #    (needs.backend-build.result == 'success' && needs.frontend-build.result == 'success')
  #  secrets: inherit
  
  # Phase 4: Unraid Deployment (requires successful builds and tests)
  unraid-deploy:
    name: Unraid Deploy
    uses: ./.github/workflows/deploy-unraid.yml
    needs: [backend-build, frontend-build]
    if: always() && (needs.backend-build.result == 'success' && needs.frontend-build.result == 'success')
    secrets: inherit
    #with:
      #environment: ${{ inputs.deploy_environment || 'production' }}
      #backend_image: ${{ needs.backend-build.outputs.image_tag }}
      #frontend_image: ${{ needs.frontend-build.outputs.image_tag }}

  # Phase 5-alternative: Production Deployment
  #production-deploy:
  #  name: Production Deploy
  #  uses: ./.github/workflows/deploy/production-deploy.yml
  #  needs: [supabase-deploy]
  #  if: |
  #    always() && 
  #    github.ref == 'refs/heads/main' && 
  #    needs.supabase-deploy.result == 'success'
  #  secrets: inherit
  #  with:
  #    force_deploy: ${{ inputs.force_deploy }}
  
  # Phase 6: Edge Deployment (after Production)
  #cloudflare-deploy:
  #  name: Cloudflare Deploy
  #  uses: ./.github/workflows/deploy/cloudflare-deploy.yml
  #  needs: [production-deploy]
  #  if: |
  #    always() && 
  #    github.ref == 'refs/heads/main' && 
  #    needs.production-deploy.result == 'success'
  #  secrets: inherit
  #  with:
  #    environment: ${{ inputs.deploy_environment }}
  
  # Summary Job (includes all test results)
  pipeline-summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [
      backend-tests,
      frontend-tests,
      backend-build,
      frontend-build,
      docs-build,
      unraid-deploy
      #supabase-deploy,
      #production-deploy,
      #cloudflare-deploy
    ]
    if: always()
    
    steps:
      - name: Generate pipeline summary
        run: |
          echo "# 🚀 CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Pipeline Overview
          echo "## 📊 Pipeline Overview" >> $GITHUB_STEP_SUMMARY
          echo "| Phase | Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Phase 1: Testing
          echo "| 🧪 Testing | Backend Tests | ${{ needs.backend-tests.result == 'success' && '✅' || needs.backend-tests.result == 'failure' && '❌' || needs.backend-tests.result == 'skipped' && '⏭️' || '⏸️' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Testing | Frontend Tests | ${{ needs.frontend-tests.result == 'success' && '✅' || needs.frontend-tests.result == 'failure' && '❌' || needs.frontend-tests.result == 'skipped' && '⏭️' || '⏸️' }} |" >> $GITHUB_STEP_SUMMARY
          
          # Phase 2: Building
          echo "| 🏗️ Building | Backend Build | ${{ needs.backend-build.result == 'success' && '✅' || needs.backend-build.result == 'failure' && '❌' || needs.backend-build.result == 'skipped' && '⏭️' || '⏸️' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏗️ Building | Frontend Build | ${{ needs.frontend-build.result == 'success' && '✅' || needs.frontend-build.result == 'failure' && '❌' || needs.frontend-build.result == 'skipped' && '⏭️' || '⏸️' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏗️ Building | Documentation | ${{ needs.docs-build.result == 'success' && '✅' || needs.docs-build.result == 'failure' && '❌' || needs.docs-build.result == 'skipped' && '⏭️' || '⏸️' }} |" >> $GITHUB_STEP_SUMMARY
          
          # Phase 3: Deployment
          echo "| 🚀 Deploy | Unraid | ${{ needs.unraid-deploy.result == 'success' && '✅' || needs.unraid-deploy.result == 'failure' && '❌' || needs.unraid-deploy.result == 'skipped' && '⏭️' || '⏸️' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🚀 Deploy | Supabase | ${{ needs.supabase-deploy.result == 'success' && '✅' || needs.supabase-deploy.result == 'failure' && '❌' || needs.supabase-deploy.result == 'skipped' && '⏭️' || '⏸️' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🚀 Deploy | Production | ${{ needs.production-deploy.result == 'success' && '✅' || needs.production-deploy.result == 'failure' && '❌' || needs.production-deploy.result == 'skipped' && '⏭️' || '⏸️' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🚀 Deploy | Cloudflare | ${{ needs.cloudflare-deploy.result == 'success' && '✅' || needs.cloudflare-deploy.result == 'failure' && '❌' || needs.cloudflare-deploy.result == 'skipped' && '⏭️' || '⏸️' }} |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Test Coverage Information
          echo "## 📈 Test Coverage" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.backend-tests.outputs.coverage }}" != "" ]]; then
            echo "- **Backend Coverage**: ${{ needs.backend-tests.outputs.coverage }}%" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ "${{ needs.frontend-tests.outputs.coverage }}" != "" ]]; then
            echo "- **Frontend Coverage**: ${{ needs.frontend-tests.outputs.coverage }}%" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall Status
          if [[ "${{ needs.backend-tests.result }}" == "success" && "${{ needs.frontend-tests.result }}" == "success" ]]; then
            TEST_STATUS="✅ All tests passed"
          elif [[ "${{ inputs.skip_tests }}" == "true" ]]; then
            TEST_STATUS="⏭️ Tests skipped"
          else
            TEST_STATUS="❌ Some tests failed"
          fi
          
          if [[ "${{ needs.backend-build.result }}" == "success" && "${{ needs.frontend-build.result }}" == "success" ]]; then
            BUILD_STATUS="✅ All builds successful"
          else
            BUILD_STATUS="❌ Some builds failed"
          fi
          
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            if [[ "${{ needs.unraid-deploy.result }}" == "success" ]]; then
              DEPLOY_STATUS="✅ Unraid deployment successful"
            elif [[ "${{ needs.cloudflare-deploy.result }}" == "success" ]]; then
              DEPLOY_STATUS="✅ Full deployment successful"
            elif [[ "${{ needs.production-deploy.result }}" == "success" ]]; then
              DEPLOY_STATUS="⚠️ Partial deployment (Cloudflare failed)"
            elif [[ "${{ needs.supabase-deploy.result }}" == "success" ]]; then
              DEPLOY_STATUS="⚠️ Database only (Production failed)"
            else
              DEPLOY_STATUS="❌ Deployment failed"
            fi
          else
            DEPLOY_STATUS="⏭️ No deployment (not main branch)"
          fi
          
          echo "## 🎯 Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests**: $TEST_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "- **Builds**: $BUILD_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment**: $DEPLOY_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Quality Gates Status
          echo "## 🛡️ Quality Gates" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.backend-tests.result }}" == "success" || "${{ inputs.skip_tests }}" == "true" ]]; then
            echo "- ✅ Backend quality gate: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ Backend quality gate: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.frontend-tests.result }}" == "success" || "${{ inputs.skip_tests }}" == "true" ]]; then
            echo "- ✅ Frontend quality gate: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ Frontend quality gate: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Security Testing Summary
          echo "## 🛡️ Security Testing" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend Security**: Secret scanning, SAST (Bandit), dependency scanning" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend Security**: Secret scanning, license compliance, dependency analysis" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Reports**: Available in GitHub Security tab and artifacts" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Branch-specific information
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "## 📋 Pull Request Summary" >> $GITHUB_STEP_SUMMARY
            echo "This is a pull request build. Deployment was skipped." >> $GITHUB_STEP_SUMMARY
            echo "- **Branch**: ${{ github.head_ref }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Target**: ${{ github.base_ref }}" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "## 🌟 Production Deployment" >> $GITHUB_STEP_SUMMARY
            echo "This build was deployed to production." >> $GITHUB_STEP_SUMMARY
            echo "- **Frontend**: https://vertical-farm.goodgoodgreens.org" >> $GITHUB_STEP_SUMMARY
            echo "- **API**: https://vertical-farm-api.goodgoodgreens.org" >> $GITHUB_STEP_SUMMARY
            echo "- **Docs**: https://docs.goodgoodgreens.org" >> $GITHUB_STEP_SUMMARY
          else
            echo "## 🔧 Development Build" >> $GITHUB_STEP_SUMMARY
            echo "This is a development branch build." >> $GITHUB_STEP_SUMMARY
            echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build completed at**: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY
      
      - name: Check pipeline health
        run: |
          # Determine overall pipeline success
          CRITICAL_FAILURES=0
          
          # Check critical test failures (unless skipped)
          if [[ "${{ needs.backend-tests.result }}" == "failure" ]] && [[ "${{ inputs.skip_tests }}" != "true" ]]; then
            echo "❌ Backend tests failed"
            CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
          fi
          
          if [[ "${{ needs.frontend-tests.result }}" == "failure" ]] && [[ "${{ inputs.skip_tests }}" != "true" ]]; then
            echo "❌ Frontend tests failed"
            CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
          fi
          
          # Check critical build failures
          if [[ "${{ needs.backend-build.result }}" == "failure" ]]; then
            echo "❌ Backend build failed"
            CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
          fi
          
          if [[ "${{ needs.frontend-build.result }}" == "failure" ]]; then
            echo "❌ Frontend build failed"
            CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
          fi
          
          # Check deployment failures on main branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            if [[ "${{ needs.supabase-deploy.result }}" == "failure" ]]; then
              echo "❌ Supabase deployment failed"
              CRITICAL_FAILURES=$((CRITICAL_FAILURES + 1))
            fi
          fi
          
          echo "Critical failures detected: $CRITICAL_FAILURES"
          
          if [ $CRITICAL_FAILURES -gt 0 ]; then
            echo "❌ Pipeline has critical failures"
            exit 1
          else
            echo "✅ Pipeline completed successfully"
          fi 