name: Backend Security Scanning

on:
  workflow_call:
    outputs:
      security_status:
        description: "Backend security scan status"
        value: ${{ jobs.backend-security.outputs.status }}
      critical_issues:
        description: "Number of critical security issues"
        value: ${{ jobs.backend-security.outputs.critical_issues }}
      high_issues:
        description: "Number of high security issues"
        value: ${{ jobs.backend-security.outputs.high_issues }}

permissions:
  contents: read
  security-events: write
  actions: read

env:
  PYTHON_VERSION: '3.13'

jobs:
  backend-security:
    name: Backend Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    outputs:
      status: ${{ steps.security-assessment.outputs.status }}
      critical_issues: ${{ steps.security-assessment.outputs.critical_issues }}
      high_issues: ${{ steps.security-assessment.outputs.high_issues }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      # =============================================================================
      # BACKEND SECURITY SETUP  
      # =============================================================================
      
      - name: Set up Python for Backend Analysis
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python*/site-packages
          key: ${{ runner.os }}-security-python-${{ env.PYTHON_VERSION }}-${{ hashFiles('backend/requirements.txt', 'backend/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-security-python-${{ env.PYTHON_VERSION }}-
            ${{ runner.os }}-security-python-
      
      - name: Install Backend Dependencies and Security Tools
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -e .[all,test]
          pip install bandit pip-audit pip-licenses detect-secrets
      
      # =============================================================================
      # BACKEND LICENSE COMPLIANCE
      # =============================================================================
      
      - name: Backend License Compliance
        working-directory: ./backend
        run: |
          echo "## 📄 Backend License Compliance" >> $GITHUB_STEP_SUMMARY
          
          # Generate license reports
          pip-licenses --format=json --with-license-file --output-file=backend-licenses.json
          pip-licenses --format=csv --output-file=backend-licenses.csv
          
          # Check for problematic licenses (don't fail build)
          pip-licenses --fail-on GPL-2.0,GPL-3.0,AGPL-3.0 || echo "⚠️ Problematic backend licenses detected"
          
          if [ -f backend-licenses.json ]; then
            TOTAL_DEPS=$(jq 'length' backend-licenses.json 2>/dev/null || echo "unknown")
            echo "- **Backend dependencies analyzed**: $TOTAL_DEPS" >> $GITHUB_STEP_SUMMARY
          fi
      
      # =============================================================================
      # BACKEND DEPENDENCY SECURITY SCANNING (MODERNIZED)
      # =============================================================================
      
      - name: Backend Dependency Security Scan
        working-directory: ./backend
        run: |
          echo "## 🔍 Backend Dependency Security" >> $GITHUB_STEP_SUMMARY
          
          # pip-audit scan for Python dependencies (modern replacement for safety)
          pip-audit --format=json --output=backend-audit-report.json || true
          pip-audit || echo "Backend dependencies have vulnerabilities"
          
          # Analyze pip-audit results
          if [ -f backend-audit-report.json ]; then
            CRITICAL_COUNT=$(jq '[.vulnerabilities[]? | select(.fix_versions == null)] | length' backend-audit-report.json 2>/dev/null || echo "0")
            TOTAL_VULNS=$(jq '[.vulnerabilities[]?] | length' backend-audit-report.json 2>/dev/null || echo "0")
            echo "- **Backend Critical vulnerabilities**: $CRITICAL_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- **Backend Total vulnerabilities**: $TOTAL_VULNS" >> $GITHUB_STEP_SUMMARY
            
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "⚠️ Critical backend vulnerabilities found:" >> $GITHUB_STEP_SUMMARY
              jq -r '.vulnerabilities[]? | select(.fix_versions == null) | "- \(.package) \(.installed_version): \(.id)"' backend-audit-report.json | head -5 >> $GITHUB_STEP_SUMMARY
            fi
          fi
      
      # =============================================================================
      # BACKEND STATIC APPLICATION SECURITY TESTING (SAST) - CORRECTED PATH
      # =============================================================================
      
      - name: Backend SAST (Bandit)
        working-directory: ./backend
        run: |
          echo "## 🛡️ Backend SAST Analysis" >> $GITHUB_STEP_SUMMARY
          
          # Bandit security scan (JSON only - corrected to scan backend/ directory)
          bandit -r backend/ -f json -o backend-bandit-report.json || true
          
          # Analyze bandit results
          if [ -f backend-bandit-report.json ]; then
            HIGH_COUNT=$(jq '.metrics._totals.SEVERITY.HIGH // 0' backend-bandit-report.json)
            MEDIUM_COUNT=$(jq '.metrics._totals.SEVERITY.MEDIUM // 0' backend-bandit-report.json)
            echo "- **Bandit High severity**: $HIGH_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- **Bandit Medium severity**: $MEDIUM_COUNT" >> $GITHUB_STEP_SUMMARY
          fi
      
      # =============================================================================
      # BACKEND SECURITY REPORTING & UPLOADS
      # =============================================================================
      
      - name: Upload Backend Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-security-reports
          path: |
            backend/backend-licenses.json
            backend/backend-licenses.csv
            backend/backend-audit-report.json
            backend/backend-bandit-report.json
          retention-days: 30
      
      # =============================================================================
      # BACKEND SECURITY ASSESSMENT & GATING
      # =============================================================================
      
      - name: Backend Security Assessment
        id: security-assessment
        run: |
          echo "## 🎯 Backend Security Assessment" >> $GITHUB_STEP_SUMMARY
          
          # Initialize counters
          CRITICAL_ISSUES=0
          HIGH_ISSUES=0
          
          # Check backend critical vulnerabilities
          if [ -f backend/backend-audit-report.json ]; then
            BACKEND_CRITICAL=$(jq '[.vulnerabilities[]? | select(.fix_versions == null)] | length' backend/backend-audit-report.json 2>/dev/null || echo "0")
            CRITICAL_ISSUES=$((CRITICAL_ISSUES + BACKEND_CRITICAL))
          fi
          
          # Check bandit high severity issues
          if [ -f backend/backend-bandit-report.json ]; then
            BANDIT_HIGH=$(jq '.metrics._totals.SEVERITY.HIGH // 0' backend/backend-bandit-report.json)
            HIGH_ISSUES=$((HIGH_ISSUES + BANDIT_HIGH))
          fi
          
          # Create summary table
          echo "| Security Category | Critical | High | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------------|----------|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Dependencies | ${BACKEND_CRITICAL:-0} | - | $([ ${BACKEND_CRITICAL:-0} -eq 0 ] && echo '✅' || echo '❌') |" >> $GITHUB_STEP_SUMMARY
          echo "| SAST Analysis | - | ${BANDIT_HIGH:-0} | $([ ${BANDIT_HIGH:-0} -le 2 ] && echo '✅' || echo '⚠️') |" >> $GITHUB_STEP_SUMMARY
          echo "| **Backend Total** | **$CRITICAL_ISSUES** | **$HIGH_ISSUES** | - |" >> $GITHUB_STEP_SUMMARY
          
          # Set outputs for main pipeline
          echo "critical_issues=$CRITICAL_ISSUES" >> $GITHUB_OUTPUT
          echo "high_issues=$HIGH_ISSUES" >> $GITHUB_OUTPUT
          
          # Determine overall status
          if [ "$CRITICAL_ISSUES" -gt 0 ]; then
            echo "status=critical" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **BACKEND SECURITY: FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "Critical backend security vulnerabilities found." >> $GITHUB_STEP_SUMMARY
          elif [ "$HIGH_ISSUES" -gt 5 ]; then
            echo "status=warning" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **BACKEND SECURITY: WARNING**" >> $GITHUB_STEP_SUMMARY
            echo "High number of backend security issues detected ($HIGH_ISSUES)." >> $GITHUB_STEP_SUMMARY
          else
            echo "status=passed" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **BACKEND SECURITY: PASSED**" >> $GITHUB_STEP_SUMMARY
            echo "No critical backend security issues detected." >> $GITHUB_STEP_SUMMARY
          fi
          
          # Output for debugging
          echo "Backend critical security issues: $CRITICAL_ISSUES"
          echo "Backend high security issues: $HIGH_ISSUES" 