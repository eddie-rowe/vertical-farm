name: Documentation Build

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - '.github/workflows/build-docs.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - '.github/workflows/build-docs.yml'
  workflow_call:
    inputs:
      deploy_to_pages:
        required: false
        type: boolean
        default: true
        description: 'Whether to deploy to GitHub Pages'

permissions:
  contents: read
  pages: write
  id-token: write

env:
  PYTHON_VERSION: '3.13'

jobs:
  build:
    name: Build Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for git-revision-date-localized plugin
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache MkDocs dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            .cache/mkdocs
          key: ${{ runner.os }}-mkdocs-${{ hashFiles('requirements-docs.txt', 'mkdocs.yml') }}
          restore-keys: |
            ${{ runner.os }}-mkdocs-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs-material
          pip install mkdocs-git-revision-date-localized-plugin
          pip install mkdocs-awesome-pages-plugin
          pip install mkdocs-mermaid2-plugin
          pip install mkdocs-minify-plugin
          pip install mkdocs-redirects
          pip install pymdown-extensions
          # Install additional requirements if they exist
          if [ -f requirements-docs.txt ]; then
            pip install -r requirements-docs.txt
          fi
      
      - name: Validate MkDocs configuration
        run: |
          # Check if mkdocs.yml is valid using MkDocs' own config validation
          mkdocs --version
          
          # Use MkDocs to validate configuration instead of raw YAML parsing
          python -c "
          import mkdocs.config
          import mkdocs.config.config_options
          try:
              config = mkdocs.config.load_config('mkdocs.yml')
              print('✅ MkDocs configuration is valid')
              print(f'Site name: {config.get(\"site_name\", \"Unknown\")}')
              print(f'Theme: {config.get(\"theme\", {}).name if hasattr(config.get(\"theme\", {}), \"name\") else \"Unknown\"}')
              
              # Check for plugins
              plugins = config.get('plugins', [])
              if plugins:
                  print(f'Plugins configured: {len(plugins)}')
          except Exception as e:
              print(f'❌ MkDocs configuration error: {e}')
              exit(1)
          "
      
      - name: Check documentation structure
        run: |
          echo "## 📚 Documentation Structure" >> $GITHUB_STEP_SUMMARY
          
          # Check for required documentation files
          REQUIRED_FILES=("README.md" "docs/index.md")
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file exists" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ $file missing" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          # Count documentation files
          TOTAL_DOCS=$(find docs/ -name "*.md" 2>/dev/null | wc -l)
          echo "| Total docs | $TOTAL_DOCS files |" >> $GITHUB_STEP_SUMMARY
          
          # Check for common documentation sections
          SECTIONS=("installation" "usage" "api" "contributing")
          echo "| Documentation Sections |  |" >> $GITHUB_STEP_SUMMARY
          echo "|------------------------|--|" >> $GITHUB_STEP_SUMMARY
          
          for section in "${SECTIONS[@]}"; do
            if find docs/ -name "*$section*" -type f 2>/dev/null | grep -q .; then
              echo "| $section | ✅ |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| $section | ❌ |" >> $GITHUB_STEP_SUMMARY
            fi
          done
      
      - name: Generate API documentation
        run: |
          # Generate API docs from backend if available
          if [ -d "backend" ]; then
            echo "Generating API documentation from backend..."
            cd backend
            
            # Install backend dependencies for docs generation
            pip install -e .[all] || true
            
            # Generate OpenAPI spec
            python -c "
            try:
                from src.main import app
                import json
                import os
                os.makedirs('../docs/api', exist_ok=True)
                with open('../docs/api/openapi.json', 'w') as f:
                    json.dump(app.openapi(), f, indent=2)
                print('✅ OpenAPI spec generated')
            except Exception as e:
                print(f'⚠️ Could not generate API docs: {e}')
            " || true
            
            cd ..
          fi
      
      - name: Build documentation
        run: |
          # Build the documentation
          mkdocs build --strict --verbose
          
          echo "✅ Documentation built successfully"
          
          # Check build output
          if [ -d "site" ]; then
            SITE_SIZE=$(du -sh site | cut -f1)
            FILE_COUNT=$(find site -type f | wc -l)
            
            echo "## 📊 Build Statistics" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Total size | $SITE_SIZE |" >> $GITHUB_STEP_SUMMARY
            echo "| Total files | $FILE_COUNT |" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Test documentation links
        run: |
          # Install htmltest for link checking
          curl -s https://api.github.com/repos/wjdp/htmltest/releases/latest \
            | grep browser_download_url \
            | grep linux-amd64 \
            | cut -d '"' -f 4 \
            | wget -qi -
          
          tar xzf htmltest*.tar.gz
          chmod +x htmltest
          
          # Create htmltest config
          cat > .htmltest.yml << EOF
          DirectoryPath: "./site"
          IgnoreURLs:
            - "^http://localhost"
            - "^https://localhost"
          IgnoreInternalEmptyHash: true
          CheckInternalHashLinks: true
          CheckExternalHashLinks: false
          EnforceHTML5: true
          EOF
          
          # Run link checking
          ./htmltest || echo "Link checking completed with warnings"
      
      - name: Optimize documentation
        run: |
          # Optimize images if any exist
          if command -v optipng &> /dev/null; then
            find site -name "*.png" -exec optipng -o7 {} \;
          fi
          
          # Minify CSS and JS files are handled by mkdocs-minify-plugin
          echo "✅ Documentation optimized"
      
      - name: Generate documentation metrics
        run: |
          # Generate metrics about the documentation
          echo "## 📈 Documentation Metrics" >> $GITHUB_STEP_SUMMARY
          
          # Count words in markdown files
          TOTAL_WORDS=$(find docs/ -name "*.md" -exec wc -w {} + 2>/dev/null | tail -n1 | awk '{print $1}' || echo "0")
          echo "| Total words | $TOTAL_WORDS |" >> $GITHUB_STEP_SUMMARY
          
          # Count code examples
          CODE_BLOCKS=$(find docs/ -name "*.md" -exec grep -c '```' {} + 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
          echo "| Code examples | $((CODE_BLOCKS / 2)) |" >> $GITHUB_STEP_SUMMARY
          
          # Check for images
          IMAGES=$(find docs/ site/ -name "*.png" -o -name "*.jpg" -o -name "*.gif" -o -name "*.svg" 2>/dev/null | wc -l)
          echo "| Images | $IMAGES |" >> $GITHUB_STEP_SUMMARY
      
      - name: Setup Pages
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && inputs.deploy_to_pages != false
        uses: actions/configure-pages@v4
      
      - name: Upload Pages artifact
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && inputs.deploy_to_pages != false
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site
      
      - name: Deploy to GitHub Pages
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && inputs.deploy_to_pages != false
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: Upload documentation artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: documentation-site
          path: ./site
          retention-days: 30
      
      - name: Generate deployment summary
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && inputs.deploy_to_pages != false
        run: |
          echo "## 🚀 Documentation Deployment" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Status | ✅ Deployed |" >> $GITHUB_STEP_SUMMARY
          echo "| URL | ${{ steps.deployment.outputs.page_url }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | GitHub Pages |" >> $GITHUB_STEP_SUMMARY
          
          echo ""
          echo "📚 **Documentation is now available at:** ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
      
      - name: Comment PR with preview
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 📚 Documentation Preview
              
              The documentation has been built successfully for this PR.
              
              ### What's included:
              - ✅ All markdown files processed
              - ✅ Links validated 
              - ✅ API documentation generated
              - ✅ Images optimized
              
              ### Download Preview:
              You can download the built documentation from the workflow artifacts.
              
              ### Metrics:
              Check the workflow summary for detailed documentation metrics and build statistics.`
            })
      
      - name: Notify on failure
        if: failure()
        run: |
          echo "## ❌ Documentation Build Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The documentation build has failed. Common issues:" >> $GITHUB_STEP_SUMMARY
          echo "- Invalid MkDocs configuration" >> $GITHUB_STEP_SUMMARY
          echo "- Missing documentation files" >> $GITHUB_STEP_SUMMARY
          echo "- Broken internal links" >> $GITHUB_STEP_SUMMARY
          echo "- Plugin configuration errors" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the workflow logs for specific error details." >> $GITHUB_STEP_SUMMARY 