name: Frontend Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/test/frontend-test.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/test/frontend-test.yml'
  workflow_call:
    outputs:
      coverage:
        description: "Frontend test coverage percentage"
        value: ${{ jobs.test.outputs.coverage }}

permissions:
  contents: read
  checks: write
  pull-requests: write

env:
  NODE_VERSION: '20'

jobs:
  test:
    name: Frontend Tests (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    strategy:
      fail-fast: false
      matrix:
        node-version: ['18', '20', '21']
        test-type: ['unit', 'integration', 'e2e']
    
    outputs:
      coverage: ${{ steps.coverage.outputs.percentage }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            frontend/node_modules
            frontend/.next/cache
            frontend/.turbo
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        working-directory: ./frontend
        run: |
          npm ci
          npm run build:types  # Generate TypeScript types if needed
      
      - name: Lint code
        if: matrix.test-type == 'unit' && matrix.node-version == '20'
        working-directory: ./frontend
        run: |
          npm run lint
          npm run type-check
      
      - name: Run unit tests
        if: matrix.test-type == 'unit'
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        run: |
          npm run test:unit -- \
            --coverage \
            --coverageReporters=cobertura \
            --coverageReporters=html \
            --coverageReporters=lcov \
            --coverageDirectory=coverage/unit \
            --maxWorkers=50% \
            --watchAll=false \
            --testResultsProcessor=jest-junit
      
      - name: Run integration tests
        if: matrix.test-type == 'integration'
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_API_URL: http://localhost:3000
        run: |
          # Build the application for integration tests
          npm run build
          
          # Start the application in background
          npm start &
          sleep 15
          
          # Run integration tests
          npm run test:integration -- \
            --coverage \
            --coverageReporters=cobertura \
            --coverageDirectory=coverage/integration \
            --maxWorkers=25% \
            --watchAll=false \
            --testTimeout=30000
      
      - name: Run E2E tests
        if: matrix.test-type == 'e2e'
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: false
        run: |
          # Install Playwright browsers
          npx playwright install --with-deps chromium firefox webkit
          
          # Build and start the application
          npm run build
          npm start &
          sleep 20
          
          # Run E2E tests
          npm run test:e2e -- \
            --reporter=html \
            --reporter=junit \
            --output-dir=test-results/e2e
      
      - name: Generate coverage report
        if: always() && matrix.test-type != 'e2e'
        working-directory: ./frontend
        run: |
          if [ -f coverage/${{ matrix.test-type }}/cobertura-coverage.xml ]; then
            COVERAGE=$(npx lcov-total coverage/${{ matrix.test-type }}/lcov.info)
            echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
            echo "### üìä Coverage Report (${{ matrix.test-type }})" >> $GITHUB_STEP_SUMMARY
            echo "Coverage: $COVERAGE%" >> $GITHUB_STEP_SUMMARY
          fi
        id: coverage
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-results-${{ matrix.node-version }}-${{ matrix.test-type }}
          path: |
            frontend/coverage/
            frontend/test-results/
            frontend/junit.xml
            frontend/playwright-report/
          retention-days: 30
      
      - name: Upload coverage to Codecov
        if: matrix.node-version == '20' && matrix.test-type == 'unit'
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/unit/lcov.info
          directory: ./frontend
          flags: frontend,unit
          name: frontend-unit-coverage
          fail_ci_if_error: false
      
      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always() && matrix.node-version == '20' && matrix.test-type != 'e2e'
        with:
          files: frontend/junit.xml
          check_name: "Frontend Tests (${{ matrix.test-type }})"
          comment_mode: create new
          fail_on: "test failures"
      
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always() && matrix.test-type == 'e2e'
        with:
          name: playwright-report-${{ matrix.node-version }}
          path: frontend/playwright-report/
          retention-days: 30
      
      - name: Post test summary
        if: always()
        run: |
          echo "## üß™ Frontend Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Node | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| ${{ matrix.test-type }} | ${{ matrix.node-version }} | ${{ job.status }} |" >> $GITHUB_STEP_SUMMARY
  
  security-scan:
    name: Frontend Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    permissions:
      contents: read
      security-events: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run npm audit
        working-directory: ./frontend
        run: |
          npm audit --audit-level=moderate --json > npm-audit.json || true
          npm audit --audit-level=moderate
      
      - name: Run ESLint security scan
        working-directory: ./frontend
        run: |
          npx eslint . \
            --ext .js,.jsx,.ts,.tsx \
            --format @microsoft/eslint-formatter-sarif \
            --output-file eslint-results.sarif || true
      
      - name: Upload ESLint results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: frontend/eslint-results.sarif
      
      - name: Check for critical vulnerabilities
        working-directory: ./frontend
        run: |
          if [ -f npm-audit.json ]; then
            CRITICAL=$(jq '.metadata.vulnerabilities.critical // 0' npm-audit.json)
            HIGH=$(jq '.metadata.vulnerabilities.high // 0' npm-audit.json)
            
            echo "Critical vulnerabilities: $CRITICAL"
            echo "High vulnerabilities: $HIGH"
            
            if [ "$CRITICAL" -gt 0 ]; then
              echo "‚ùå Critical security vulnerabilities found!"
              exit 1
            fi
            
            if [ "$HIGH" -gt 5 ]; then
              echo "‚ö†Ô∏è Too many high severity vulnerabilities ($HIGH)"
              exit 1
            fi
          fi
  
  accessibility-test:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Build application
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        run: npm run build
      
      - name: Start application
        working-directory: ./frontend
        run: |
          npm start &
          sleep 15
      
      - name: Run accessibility tests
        working-directory: ./frontend
        run: |
          npx @axe-core/cli http://localhost:3000 \
            --save accessibility-report.json \
            --reporter json \
            --exit
      
      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-report
          path: frontend/accessibility-report.json
          retention-days: 30 