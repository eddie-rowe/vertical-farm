name: Backend Tests

on:
  workflow_call:
    outputs:
      coverage:
        description: "Backend test coverage percentage"
        value: ${{ jobs.test-matrix.outputs.coverage }}

permissions:
  contents: read
  checks: write
  pull-requests: write
  security-events: write

env:
  PYTHON_VERSION: '3.13'

jobs:
  # Combined Quality Gates & Testing (much faster!)
  test-matrix:
    name: Tests (${{ matrix.test-type }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    strategy:
      fail-fast: false
      matrix:
        test-type: ['unit', 'integration', 'api', 'schemas']
    
    outputs:
      coverage: ${{ steps.coverage.outputs.percentage }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python*/site-packages
            backend/.pytest_cache
          key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ hashFiles('backend/requirements.txt', 'backend/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-
            ${{ runner.os }}-python-
      
      - name: Install dependencies and quality tools
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -e .[all,test]
          pip install pytest-cov pytest-xdist pytest-timeout
          pip install black isort mypy flake8 pylint vulture
          pip install types-requests types-redis types-PyYAML
      
      - name: Run quality checks (fast pre-flight)
        working-directory: ./backend
        run: |
          # Quick format check
          black --check app/ --diff
          
          # Import sorting check  
          isort --check-only app/ --diff
          
          # Basic linting
          flake8 app/ --max-line-length=100 --ignore=E203,W503
          
          # Type checking
          mypy app/ --ignore-missing-imports --no-strict-optional
      
      - name: Run unit tests
        if: matrix.test-type == 'unit'
        working-directory: ./backend
        env:
          TESTING: true
        run: |
          pytest app/tests/unit/ \
            --cov=app \
            --cov-report=xml:coverage-unit.xml \
            --cov-report=html:htmlcov-unit \
            --junit-xml=test-results-unit.xml \
            -n auto \
            --timeout=60 \
            -v
      
      - name: Run API tests
        if: matrix.test-type == 'api'
        working-directory: ./backend
        env:
          TESTING: true
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          pytest app/tests/api/ \
            --cov=app \
            --cov-report=xml:coverage-api.xml \
            --cov-report=html:htmlcov-api \
            --junit-xml=test-results-api.xml \
            -n auto \
            --timeout=60 \
            -v
      
      - name: Run integration tests
        if: matrix.test-type == 'integration'
        working-directory: ./backend
        env:
          TESTING: true
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          pytest app/tests/integration/ \
            --cov=app \
            --cov-report=xml:coverage-integration.xml \
            --cov-report=html:htmlcov-integration \
            --junit-xml=test-results-integration.xml \
            -n auto \
            --timeout=120 \
            -v
      
      - name: Run schema tests
        if: matrix.test-type == 'schemas'
        working-directory: ./backend
        env:
          TESTING: true
        run: |
          pytest app/tests/schemas/ \
            --cov=app \
            --cov-report=xml:coverage-schemas.xml \
            --cov-report=html:htmlcov-schemas \
            --junit-xml=test-results-schemas.xml \
            -n auto \
            --timeout=60 \
            -v
      
      - name: Generate coverage report
        if: always()
        working-directory: ./backend
        run: |
          if [ -f coverage-${{ matrix.test-type }}.xml ]; then
            COVERAGE=$(python -c "
            import xml.etree.ElementTree as ET
            tree = ET.parse('coverage-${{ matrix.test-type }}.xml')
            root = tree.getroot()
            print(f\"{float(root.attrib['line-rate']) * 100:.1f}\")
            ")
            echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
            echo "### ðŸ“Š Coverage Report (${{ matrix.test-type }})" >> $GITHUB_STEP_SUMMARY
            echo "Coverage: $COVERAGE%" >> $GITHUB_STEP_SUMMARY
          fi
        id: coverage
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results-${{ matrix.test-type }}
          path: |
            backend/test-results-*.xml
            backend/coverage-*.xml
            backend/htmlcov-*/
          retention-days: 30
      
      - name: Upload coverage to Codecov
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage-unit.xml
          directory: ./backend
          flags: backend,unit
          name: backend-unit-coverage
          fail_ci_if_error: false
      
      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: backend/test-results-*.xml
          check_name: "Backend Tests (${{ matrix.test-type }})"
          comment_mode: always
          fail_on: "test failures" 