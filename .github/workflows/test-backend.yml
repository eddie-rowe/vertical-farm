name: Backend Tests

on:
  workflow_call:
    outputs:
      coverage:
        description: "Backend test coverage percentage"
        value: ${{ jobs.test-matrix.outputs.coverage }}

permissions:
  contents: read
  checks: write
  pull-requests: write
  security-events: write

env:
  PYTHON_VERSION: '3.13'

jobs:
  # Non-blocking Quality Checks (formatting, style preferences)
  code-style:
    name: Code Style & Formatting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true  # Make this non-blocking
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install formatting tools
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install black isort pylint vulture pyright
          pip install types-requests types-redis types-PyYAML
      
      - name: Check code formatting (black)
        working-directory: ./backend
        continue-on-error: true
        run: |
          echo "## üé® Code Formatting Check" >> $GITHUB_STEP_SUMMARY
          if black --check app/ --diff; then
            echo "‚úÖ Code formatting: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è Code formatting: NEEDS ATTENTION" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Suggested fixes:**" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "cd backend && black app/" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Check import sorting (isort)
        working-directory: ./backend
        continue-on-error: true
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üì¶ Import Sorting Check" >> $GITHUB_STEP_SUMMARY
          if isort --check-only app/ --diff; then
            echo "‚úÖ Import sorting: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è Import sorting: NEEDS ATTENTION" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Suggested fixes:**" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "cd backend && isort app/" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Advanced linting (pylint)
        working-directory: ./backend
        continue-on-error: true
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üîç Advanced Linting" >> $GITHUB_STEP_SUMMARY
          if pylint app/ --exit-zero --output-format=text --reports=y > pylint-report.txt; then
            SCORE=$(grep "Your code has been rated" pylint-report.txt | grep -o '[0-9]\+\.[0-9]\+' | head -1)
            echo "üìä Pylint score: $SCORE/10" >> $GITHUB_STEP_SUMMARY
            if (( $(echo "$SCORE >= 8.0" | bc -l) )); then
              echo "‚úÖ Advanced linting: GOOD" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ö†Ô∏è Advanced linting: COULD IMPROVE" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ö†Ô∏è Advanced linting: ISSUES FOUND" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "<details><summary>üìÑ View detailed linting report</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          head -50 pylint-report.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY

  # Blocking Quality Gates & Testing
  test-matrix:
    name: Tests (${{ matrix.test-type }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    strategy:
      fail-fast: false
      matrix:
        test-type: ['unit', 'integration', 'api', 'schemas']
    
    outputs:
      coverage: ${{ steps.coverage.outputs.percentage }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python*/site-packages
            backend/.pytest_cache
          key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ hashFiles('backend/requirements.txt', 'backend/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-
            ${{ runner.os }}-python-
      
      - name: Install dependencies and quality tools
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -e .[all,test]
          pip install pytest-cov pytest-xdist pytest-timeout
          pip install pyright flake8
          pip install types-requests types-redis types-PyYAML
      
      - name: Type checking (pyright)
        working-directory: ./backend
        continue-on-error: true  # Make type checking non-blocking
        run: |
          echo "## üîç Type Checking with Pyright" >> $GITHUB_STEP_SUMMARY
          echo "Running pyright type checker..." 
          
          if pyright app/ > pyright-output.txt 2>&1; then
            echo "‚úÖ Type checking: PASSED" >> $GITHUB_STEP_SUMMARY
            echo "No type errors found!" >> $GITHUB_STEP_SUMMARY
          else
            # Count errors and warnings
            ERRORS=$(grep -c " - error:" pyright-output.txt || echo "0")
            WARNINGS=$(grep -c " - warning:" pyright-output.txt || echo "0")
            
            echo "‚ö†Ô∏è Type checking: $ERRORS errors, $WARNINGS warnings" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Type checking results:**" >> $GITHUB_STEP_SUMMARY
            echo "- üö´ Errors: $ERRORS" >> $GITHUB_STEP_SUMMARY  
            echo "- ‚ö†Ô∏è Warnings: $WARNINGS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "<details><summary>üìÑ View first 50 type issues</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -50 pyright-output.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üí° **Note:** Type checking is non-blocking. Pipeline continues with warnings." >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Critical syntax checks (BLOCKING)
        working-directory: ./backend
        run: |
          echo "üõ°Ô∏è Running critical syntax checks..."
          
          # Basic syntax and critical linting (blocking)
          echo "Checking syntax and critical issues..."
          flake8 app/ --max-line-length=100 --ignore=E203,W503 --select=E9,F63,F7,F82
          
          echo "‚úÖ Critical syntax checks passed"
      
      - name: Run unit tests
        if: matrix.test-type == 'unit'
        working-directory: ./backend
        env:
          TESTING: true
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        run: |
          pytest app/tests/unit/ \
            --cov=app \
            --cov-report=xml:coverage-unit.xml \
            --cov-report=html:htmlcov-unit \
            --junit-xml=test-results-unit.xml \
            -n auto \
            --timeout=60 \
            -v
      
      - name: Run API tests
        if: matrix.test-type == 'api'
        working-directory: ./backend
        env:
          TESTING: true
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        run: |
          pytest app/tests/api/ \
            --cov=app \
            --cov-report=xml:coverage-api.xml \
            --cov-report=html:htmlcov-api \
            --junit-xml=test-results-api.xml \
            -n auto \
            --timeout=60 \
            -v
      
      - name: Run integration tests
        if: matrix.test-type == 'integration'
        working-directory: ./backend
        env:
          TESTING: true
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        run: |
          pytest app/tests/integration/ \
            --cov=app \
            --cov-report=xml:coverage-integration.xml \
            --cov-report=html:htmlcov-integration \
            --junit-xml=test-results-integration.xml \
            -n auto \
            --timeout=120 \
            -v
      
      - name: Run schema tests
        if: matrix.test-type == 'schemas'
        working-directory: ./backend
        env:
          TESTING: true
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        run: |
          pytest app/tests/schemas/ \
            --cov=app \
            --cov-report=xml:coverage-schemas.xml \
            --cov-report=html:htmlcov-schemas \
            --junit-xml=test-results-schemas.xml \
            -n auto \
            --timeout=60 \
            -v
      
      - name: Generate coverage report
        if: always()
        working-directory: ./backend
        run: |
          if [ -f coverage-${{ matrix.test-type }}.xml ]; then
            COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage-${{ matrix.test-type }}.xml'); root = tree.getroot(); print(f'{float(root.attrib[\"line-rate\"]) * 100:.1f}')")
            echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
            echo "### üìä Coverage Report (${{ matrix.test-type }})" >> $GITHUB_STEP_SUMMARY
            echo "Coverage: $COVERAGE%" >> $GITHUB_STEP_SUMMARY
          fi
        id: coverage
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results-${{ matrix.test-type }}
          path: |
            backend/test-results-*.xml
            backend/coverage-*.xml
            backend/htmlcov-*/
          retention-days: 30
      
      - name: Upload coverage to Codecov
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v5
        with:
          file: ./backend/coverage-unit.xml
          directory: ./backend
          flags: backend,unit
          name: backend-unit-coverage
          fail_ci_if_error: false
      
      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: backend/test-results-*.xml
          check_name: "Backend Tests (${{ matrix.test-type }})"
          comment_mode: always
          fail_on: "test failures" 