name: Frontend Build

on:
  workflow_call:
    inputs:
      push_to_registry:
        required: false
        type: boolean
        default: true
        description: 'Whether to push the built image to registry'
      tag_suffix:
        required: false
        type: string
        default: ''
        description: 'Suffix to add to the image tag'
    outputs:
      image_tag:
        description: "Built Docker image tag"
        value: ${{ jobs.build.outputs.image_tag }}
      image_digest:
        description: "Built Docker image digest"
        value: ${{ jobs.build.outputs.image_digest }}

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/frontend

jobs:
  build:
    name: Build Frontend Image
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0
          platforms: linux/amd64,linux/arm64
      
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-frontend-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-frontend-
            ${{ runner.os }}-buildx-
      
      - name: Log in to Container Registry
        if: inputs.push_to_registry != false
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{branch}}-{{sha}}-{{date 'YYYYMMDD'}}
          labels: |
            org.opencontainers.image.title=Vertical Farm Frontend
            org.opencontainers.image.description=Next.js frontend for vertical farming management
            org.opencontainers.image.vendor=Vertical Farm
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ inputs.push_to_registry != false }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=local,src=/tmp/.buildx-cache
            type=gha
          cache-to: |
            type=local,dest=/tmp/.buildx-cache-new,mode=max
            type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            NODE_VERSION=20
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
      
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      
      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          timeout: '10m'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Check for critical vulnerabilities
        run: |
          # Parse Trivy results and fail if critical vulnerabilities found
          if [ -f trivy-results.sarif ]; then
            CRITICAL_COUNT=$(jq '[.runs[].results[] | select(.level == "error")] | length' trivy-results.sarif)
            HIGH_COUNT=$(jq '[.runs[].results[] | select(.level == "warning")] | length' trivy-results.sarif)
            
            echo "Critical vulnerabilities: $CRITICAL_COUNT"
            echo "High vulnerabilities: $HIGH_COUNT"
            
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "❌ Critical vulnerabilities found in image!"
              echo "### 🚨 Security Issues Found" >> $GITHUB_STEP_SUMMARY
              echo "- Critical: $CRITICAL_COUNT" >> $GITHUB_STEP_SUMMARY
              echo "- High: $HIGH_COUNT" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
            
            if [ "$HIGH_COUNT" -gt 15 ]; then
              echo "⚠️ Too many high severity vulnerabilities ($HIGH_COUNT)"
              echo "### ⚠️ Security Warning" >> $GITHUB_STEP_SUMMARY
              echo "High severity vulnerabilities: $HIGH_COUNT (threshold: 15)" >> $GITHUB_STEP_SUMMARY
            fi
          fi
      
      - name: Test image
        run: |
          # Test the built image
          docker run --rm \
            --name frontend-test \
            -e NODE_ENV=production \
            -p 3000:3000 \
            -d ${{ steps.meta.outputs.tags }} || exit 1
          
          # Wait for container to start
          sleep 15
          
          # Test if the application is responding
          if curl -f http://localhost:3000; then
            echo "✅ Container health check passed"
          else
            echo "❌ Container health check failed"
            docker logs frontend-test
            exit 1
          fi
          
          # Test specific routes
          for route in "/dashboard" "/farms"; do
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:3000$route | grep -q "200\|404"; then
              echo "✅ Route $route accessible"
            else
              echo "⚠️ Route $route returned unexpected status"
            fi
          done
          
          # Stop test container
          docker stop frontend-test
      
      - name: Performance analysis
        run: |
          # Start container for performance testing
          docker run --rm \
            --name frontend-perf \
            -p 3000:3000 \
            -d ${{ steps.meta.outputs.tags }}
          
          sleep 15
          
          # Test page load times
          echo "## ⚡ Performance Analysis" >> $GITHUB_STEP_SUMMARY
          
          for page in "/" "/dashboard"; do
            LOAD_TIME=$(curl -w "%{time_total}" -s -o /dev/null http://localhost:3000$page)
            echo "| Page $page | ${LOAD_TIME}s |" >> $GITHUB_STEP_SUMMARY
            
            if (( $(echo "$LOAD_TIME > 3.0" | bc -l) )); then
              echo "⚠️ Page $page loads slowly (${LOAD_TIME}s > 3s)" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          # Stop performance test container
          docker stop frontend-perf
      
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta.outputs.tags }}
          format: spdx-json
          output-file: ./frontend-sbom.spdx.json
      
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: frontend-sbom
          path: ./frontend-sbom.spdx.json
          retention-days: 90
      
      - name: Lighthouse performance audit
        run: |
          # Start container for Lighthouse audit
          docker run --rm \
            --name frontend-lighthouse \
            -p 3000:3000 \
            -d ${{ steps.meta.outputs.tags }}
          
          sleep 15
          
          # Install Lighthouse
          npm install -g @lhci/cli
          
          # Run Lighthouse audit
          lhci autorun \
            --upload.target=temporary-public-storage \
            --collect.url=http://localhost:3000 \
            --collect.url=http://localhost:3000/dashboard \
            --assert.assertions.categories:performance=0.8 \
            --assert.assertions.categories:accessibility=0.9 \
            --assert.assertions.categories:best-practices=0.8 \
            --assert.assertions.categories:seo=0.8 || true
          
          # Stop container
          docker stop frontend-lighthouse
      
      - name: Sign the container image
        if: inputs.push_to_registry != false
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          # Install cosign
          curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
          sudo mv cosign-linux-amd64 /usr/local/bin/cosign
          sudo chmod +x /usr/local/bin/cosign
          
          # Sign the image
          cosign sign --yes ${{ steps.meta.outputs.tags }}@${{ steps.build.outputs.digest }}
      
      - name: Bundle analysis
        run: |
          # Extract bundle information from the built image
          docker create --name temp-container ${{ steps.meta.outputs.tags }}
          docker cp temp-container:/app/.next/analyze bundle-analysis/ || true
          docker rm temp-container
          
          echo "## 📦 Bundle Analysis" >> $GITHUB_STEP_SUMMARY
          
          if [ -d bundle-analysis ]; then
            echo "Bundle analysis completed. Check artifacts for details." >> $GITHUB_STEP_SUMMARY
          else
            echo "Bundle analysis not available." >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-bundle-analysis
          path: bundle-analysis/
          retention-days: 30
      
      - name: Generate build summary
        run: |
          echo "## 🎨 Frontend Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Image | \`${{ steps.meta.outputs.tags }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Digest | \`${{ steps.build.outputs.digest }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Platforms | linux/amd64, linux/arm64 |" >> $GITHUB_STEP_SUMMARY
          echo "| Registry | ${{ env.REGISTRY }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Pushed | ${{ inputs.push_to_registry != false && '✅ Yes' || '❌ No' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Signed | ${{ inputs.push_to_registry != false && '✅ Yes' || '❌ No' }} |" >> $GITHUB_STEP_SUMMARY
          
          # Add vulnerability summary
          if [ -f trivy-results.sarif ]; then
            CRITICAL_COUNT=$(jq '[.runs[].results[] | select(.level == "error")] | length' trivy-results.sarif)
            HIGH_COUNT=$(jq '[.runs[].results[] | select(.level == "warning")] | length' trivy-results.sarif)
            echo "| Security | Critical: $CRITICAL_COUNT, High: $HIGH_COUNT |" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Create deployment artifact
        if: inputs.push_to_registry != false
        run: |
          mkdir -p deployment
          cat > deployment/frontend-image.json << EOF
          {
            "image": "${{ steps.meta.outputs.tags }}",
            "digest": "${{ steps.build.outputs.digest }}",
            "tag": "${{ github.sha }}${{ inputs.tag_suffix }}",
            "registry": "${{ env.REGISTRY }}",
            "name": "${{ env.IMAGE_NAME }}",
            "platforms": ["linux/amd64", "linux/arm64"],
            "labels": ${{ steps.meta.outputs.json }},
            "built_at": "${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}"
          }
          EOF
      
      - name: Upload deployment artifact
        if: inputs.push_to_registry != false
        uses: actions/upload-artifact@v4
        with:
          name: frontend-deployment-info
          path: deployment/
          retention-days: 30 