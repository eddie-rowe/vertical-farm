name: Cloudflare Deploy

on:
  workflow_run:
    #workflows: ["Production Deploy"]
    types:
      - completed
    branches: [ main ]
  workflow_call:
    inputs:
      environment:
        required: false
        type: string
        default: 'production'
        description: 'Environment to deploy to'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

permissions:
  contents: read
  id-token: write

env:
  NODE_VERSION: '22'

jobs:
  deploy:
    name: Deploy to Cloudflare
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    environment: ${{ inputs.environment || 'production' }}
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: workers/package-lock.json
      
      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            workers/node_modules
            workers/.wrangler
          key: ${{ runner.os }}-workers-${{ hashFiles('workers/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-workers-
      
      - name: Install dependencies
        working-directory: ./workers
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi
      
      - name: Validate worker code
        working-directory: ./workers
        run: |
          echo "## 🔍 Worker Validation" >> $GITHUB_STEP_SUMMARY
          
          # TypeScript check if applicable
          if [ -f tsconfig.json ]; then
            npx tsc --noEmit
            echo "✅ TypeScript validation passed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # ESLint check if configured
          if [ -f .eslintrc.js ] || [ -f .eslintrc.json ]; then
            npx eslint src/
            echo "✅ ESLint validation passed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for required files
          if [ -f wrangler.toml ]; then
            echo "✅ Wrangler configuration found" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Wrangler configuration missing" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
      
      - name: Run tests
        working-directory: ./workers
        run: |
          if [ -f package.json ] && grep -q '"test"' package.json; then
            npm test
            echo "✅ Worker tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ No tests configured for workers" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Deploy to Cloudflare Workers
        working-directory: ./workers
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          DEPLOY_ENVIRONMENT: ${{ inputs.environment || 'production' }}
        run: |
          echo "## 🚀 Cloudflare Deployment" >> $GITHUB_STEP_SUMMARY
          
          # Deploy based on environment
          if [ "$DEPLOY_ENVIRONMENT" = "production" ]; then
            npx wrangler deploy --env production
            echo "✅ Deployed to production environment" >> $GITHUB_STEP_SUMMARY
          else
            npx wrangler deploy --env staging
            echo "✅ Deployed to staging environment" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Test deployed worker
        env:
          WORKER_URL: ${{ secrets.CLOUDFLARE_WORKER_URL }}
        run: |
          echo "## 🧪 Worker Testing" >> $GITHUB_STEP_SUMMARY
          
          # Wait for deployment to propagate
          sleep 30
          
          # Test worker health
          if curl -f "$WORKER_URL/health" --max-time 30; then
            echo "✅ Worker health check passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Worker health check failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Test worker functionality
          RESPONSE=$(curl -s "$WORKER_URL/api/status" --max-time 30 | jq -r '.status' || echo "error")
          if [ "$RESPONSE" = "ok" ]; then
            echo "✅ Worker API responding correctly" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Worker API response unexpected: $RESPONSE" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Update worker analytics
        working-directory: ./workers
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          # Get worker analytics
          WORKER_NAME=$(grep -m1 'name =' wrangler.toml | cut -d'"' -f2)
          
          if [ -n "$WORKER_NAME" ]; then
            echo "## 📊 Worker Analytics" >> $GITHUB_STEP_SUMMARY
            
            # Get deployment info
            DEPLOYMENT_INFO=$(npx wrangler deployments list --name "$WORKER_NAME" --format json | head -1)
            
            if [ -n "$DEPLOYMENT_INFO" ]; then
              DEPLOYMENT_ID=$(echo "$DEPLOYMENT_INFO" | jq -r '.id')
              DEPLOYMENT_TIME=$(echo "$DEPLOYMENT_INFO" | jq -r '.created_on')
              
              echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
              echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
              echo "| Worker Name | $WORKER_NAME |" >> $GITHUB_STEP_SUMMARY
              echo "| Deployment ID | $DEPLOYMENT_ID |" >> $GITHUB_STEP_SUMMARY
              echo "| Deployed At | $DEPLOYMENT_TIME |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
      
      - name: Set up monitoring
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          # Create or update health check monitor
          curl -X POST "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/healthchecks" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data '{
              "name": "Vertical Farm Worker Health Check",
              "description": "Monitor worker health endpoint",
              "type": "HTTP",
              "monitor": "'${WORKER_URL}'/health",
              "method": "GET",
              "port": 443,
              "timeout": 10,
              "retries": 3,
              "interval": 60,
              "expected_codes": "200",
              "follow_redirects": true,
              "allow_insecure": false,
              "notification_email_addresses": []
            }' || echo "Health check monitor setup failed (may already exist)"
      
      - name: Generate deployment summary
        env:
          DEPLOY_ENVIRONMENT: ${{ inputs.environment || 'production' }}
          WORKER_URL: ${{ secrets.CLOUDFLARE_WORKER_URL }}
        run: |
          echo "## 🎉 Cloudflare Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | $DEPLOY_ENVIRONMENT |" >> $GITHUB_STEP_SUMMARY
          echo "| Worker URL | $WORKER_URL |" >> $GITHUB_STEP_SUMMARY
          echo "| Status | ✅ Deployed |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployed At | $(date -u +%Y-%m-%dT%H:%M:%SZ) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Access:" >> $GITHUB_STEP_SUMMARY
          echo "- **Worker URL**: ${{ secrets.CLOUDFLARE_WORKER_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Check**: ${{ secrets.CLOUDFLARE_WORKER_URL }}/health" >> $GITHUB_STEP_SUMMARY
          echo "- **API Status**: ${{ secrets.CLOUDFLARE_WORKER_URL }}/api/status" >> $GITHUB_STEP_SUMMARY
      
      - name: Notify on failure
        if: failure()
        run: |
          echo "## ❌ Cloudflare Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The Cloudflare Workers deployment has failed." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Common Issues:" >> $GITHUB_STEP_SUMMARY
          echo "- Invalid Cloudflare API credentials" >> $GITHUB_STEP_SUMMARY
          echo "- Worker script syntax errors" >> $GITHUB_STEP_SUMMARY
          echo "- Resource limits exceeded" >> $GITHUB_STEP_SUMMARY
          echo "- Network connectivity issues" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the workflow logs for specific error details." >> $GITHUB_STEP_SUMMARY 