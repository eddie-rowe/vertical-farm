services:
  backend:
    container_name: backend
    hostname: backend
    build: 
      context: ./backend
      target: development  # Use development stage
    ports:
      - "8000:8000"
    volumes:
      - backend-logs:/app/backend/logs
      # Mount source code for hot reload in development
      - ./backend/app:/app/app:ro
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - SUPABASE_JWT_SECRET=${SUPABASE_JWT_SECRET}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - DD_SERVICE=vertical-farm-backend
      - DD_ENV=dev
      - DD_VERSION=1.0.0
      - DD_AGENT_HOST=dd-agent
      - FRONTEND_HOST=${FRONTEND_HOST}
      - PROJECT_NAME=${PROJECT_NAME}
      - API_V1_STR=${API_V1_STR}
      - DEBUG=${DEBUG}
      - ENVIRONMENT=${ENVIRONMENT}
      # Background Tasks Configuration (Supabase-based)
      - BACKGROUND_TASKS_ENABLED=true
      - BACKGROUND_TASK_SYSTEM=supabase
    restart: unless-stopped
    labels:
      com.datadoghq.ad.logs: '[{"source": "fastapi", "service": "vertical-farm-backend"}]'

  frontend:
    container_name: frontend
    hostname: frontend
    build:
      context: ./frontend
      args: # These are build-time arguments
        NEXT_PUBLIC_SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${NEXT_PUBLIC_SUPABASE_ANON_KEY}
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - NEXT_PUBLIC_DD_RUM_APPLICATION_ID=${NEXT_PUBLIC_DD_RUM_APPLICATION_ID}
      - NEXT_PUBLIC_DD_RUM_CLIENT_TOKEN=${NEXT_PUBLIC_DD_RUM_CLIENT_TOKEN}
      - NEXT_PUBLIC_DD_SITE=${NEXT_PUBLIC_DD_SITE}
      - NEXT_PUBLIC_DD_SERVICE=${NEXT_PUBLIC_DD_SERVICE}
      - NEXT_PUBLIC_DD_ENV=${NEXT_PUBLIC_DD_ENV}
    labels:
      com.datadoghq.ad.logs: '[{"source": "nextjs", "service": "vertical-farm-frontend"}]'
    depends_on:
      - backend
      - datadog

  datadog:
    container_name: dd-agent
    hostname: dd-agent
    image: datadog/agent:latest
    environment:
      - DD_API_KEY=${DD_API_KEY}
      - DD_SITE=${DD_SITE}
      - DD_SERVICE=${DD_SERVICE}
      - DD_ENV=${DD_ENV}
      - DD_LOGS_ENABLED=true
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      - DD_APM_ENABLED=true
      - DD_APM_NON_LOCAL_TRAFFIC=true
      - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
      - DD_HOSTNAME=vertical-farm-docker-desktop
      - DD_PROCESS_CONFIG_PROCESS_COLLECTION_ENABLED=true
      - SUPABASE_METRICS_URL=${SUPABASE_METRICS_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - POSTGRES_DATADOG_USERNAME=${POSTGRES_DATADOG_USERNAME}
      - POSTGRES_DATADOG_PASSWORD=${POSTGRES_DATADOG_PASSWORD}
      - POSTGRES_DATADOG_DBNAME=${POSTGRES_DATADOG_DBNAME}
    labels:
      com.datadoghq.ad.checks: '{"supabase": {"instances": [{"privileged_metrics_endpoint": "%%env_SUPABASE_METRICS_URL%%","username":"service_role","password":"%%env_SUPABASE_SERVICE_KEY%%"}]}}'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - backend-logs:/app/backend/logs
      - /etc/passwd:/etc/passwd:ro
    ports:
      - "8126:8126" # APM
    restart: unless-stopped

volumes:
  backend-logs: 
  supabase-data: 