# Task ID: 3
# Title: Home Assistant Integration
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Implement WebSocket and REST API integration with Home Assistant to enable device control and sensor monitoring.
# Details:
1. Create a Home Assistant client service in FastAPI:
   ```python
   class HomeAssistantClient:
       def __init__(self, base_url, access_token):
           self.base_url = base_url
           self.headers = {
               "Authorization": f"Bearer {access_token}",
               "Content-Type": "application/json"
           }
           self.websocket = None
       
       async def connect_websocket(self):
           # WebSocket connection logic
           pass
           
       async def get_entities(self, entity_type=None):
           # Fetch entities from Home Assistant
           pass
           
       async def call_service(self, domain, service, entity_id, data=None):
           # Control devices via service calls
           pass
   ```
2. Implement WebSocket subscription to sensor and device states
3. Create endpoints in FastAPI to proxy Home Assistant API:
   - GET /api/ha/entities - List all entities
   - GET /api/ha/entities/{entity_id} - Get entity details
   - POST /api/ha/services/{domain}/{service} - Call a service
4. Add authentication and connection management
5. Implement error handling and reconnection logic
6. Create a background task for maintaining WebSocket connection
7. Add caching layer for entity states to reduce API calls

# Test Strategy:
Unit tests with mocked Home Assistant responses. Integration tests with a test Home Assistant instance. Test WebSocket reconnection on connection loss. Verify entity state updates are received in real-time. Test service calls for device control.

# Subtasks:
## 1. Client Service Implementation [done]
### Dependencies: None
### Description: Create a client service layer that abstracts the communication with external systems
### Details:
Implement a service class that handles both WebSocket and REST communication patterns. Include connection management, serialization/deserialization of payloads, and retry logic for failed connections.
<info added on 2025-06-06T22:33:03.577Z>
Database analysis confirms the schema is fully optimized for Home Assistant integration. Existing tables such as `device_assignments`, `sensor_readings`, `scheduled_actions`, and `automation_rules` already support HA entities, sensor data, device control, and automation logic. The farm hierarchy enables device assignment at any level. Enhancements include a migration adding `integrations` and `integration_sync_log` tables for tracking HA connection status, sync events, and performance, plus an `integration_id` field in `device_assignments` to link devices to their integration source. No further schema changes are needed; backend and frontend can use these tables directly for seamless Home Assistant integration.
</info added on 2025-06-06T22:33:03.577Z>
<info added on 2025-06-08T14:10:11.099Z>
<info added on 2025-06-08T14:10:06.000Z>
The WebSocket service class has been enhanced with Cloudflare support for protected Home Assistant instances. The implementation now includes:

1. Authentication handling for Cloudflare-protected instances using Service Client ID and Client Secret credentials
2. Modified connection initialization to properly establish WebSocket connections through Cloudflare's protection layer
3. Updated connection testing functionality to validate credentials against Cloudflare-protected Home Assistant instances
4. Proper error handling and user feedback for Cloudflare authentication failures
5. Seamless fallback to standard WebSocket connection for non-Cloudflare instances

These enhancements ensure our integration works with both standard and Cloudflare-protected Home Assistant deployments, maintaining the same connection management, payload handling, and retry logic across both scenarios.
</info added on 2025-06-08T14:10:06.000Z>
</info added on 2025-06-08T14:10:11.099Z>
<info added on 2025-06-08T14:32:37.799Z>
The WebSocket API implementation has been enhanced with a completely redesigned user interface for device discovery and management. The new UX provides an intuitive Connect → Import → Assign workflow with a two-column layout separating available and imported devices. Key improvements include intelligent filtering by device type (lights, switches, sensors) with count indicators, progressive disclosure that shows only farming-relevant devices by default, bulk import operations with multi-select functionality, and clear visual status indicators for device states. The interface now features enhanced tab structure, real-time search across device properties, and a distinct import history section. These improvements significantly reduce user overwhelm when dealing with large Home Assistant installations while maintaining full functionality of the WebSocket connection.
</info added on 2025-06-08T14:32:37.799Z>

## 2. WebSocket Connection Management [done]
### Dependencies: 3.1
### Description: Implement WebSocket connection handling for real-time data updates
### Details:
Develop WebSocket client implementation with connection lifecycle management (connect, disconnect, reconnect), heartbeat mechanism, and incremental update processing to reduce bandwidth usage.
<info added on 2025-06-08T14:05:53.168Z>
WebSocket client implementation has been successfully completed in the frontend HomeAssistantService following the official Home Assistant WebSocket API protocol. The implementation includes a comprehensive authentication flow that properly handles the auth_required → auth → auth_ok sequence as specified in the API documentation. 

The client supports Cloudflare Access with appropriate CF-Access headers when configured, and establishes real-time state updates by subscribing to state_changed events, which are then converted to our HADevice format for consistent data handling.

For reliability, the implementation features automatic reconnection logic with exponential backoff to handle network interruptions gracefully. The client implements complete protocol support for all message types defined in the Home Assistant WebSocket API.

The implementation also includes device subscription capabilities, allowing the application to subscribe or unsubscribe to specific entity updates, which helps optimize bandwidth usage through incremental updates.

The WebSocket client now successfully connects directly to our configured Home Assistant instance at https://automate-api.goodgoodgreens.org, authenticates using JWT tokens, and provides real-time device state changes that are automatically reflected in the user interface.
</info added on 2025-06-08T14:05:53.168Z>

## 3. REST API Integration [done]
### Dependencies: 3.1
### Description: Develop REST endpoint integration for non-real-time operations
### Details:
Create REST client with appropriate request/response handling, implement API versioning support, and develop serialization/deserialization for various data formats.
<info added on 2025-06-06T22:39:57.141Z>
✅ REST API Integration Complete! Successfully implemented all missing backend functionality for device assignments:

Backend Endpoints Added:
- POST /devices/{entity_id}/assign - Assign device to farm location (shelf/rack/row/farm level)
- GET /devices/assignments - Get device assignments with filtering by farm location
- DELETE /devices/{entity_id}/assignment - Remove device assignment
- GET /farms/{farm_id}/assigned-devices - Get all devices assigned to a farm with current states

Infrastructure Complete:
- Database service with AsyncPG connection pooling
- Database URL auto-generation from Supabase config
- Pydantic models for device assignment requests
- Full database integration with device_assignments table
- Added asyncpg dependency to requirements.txt
- Application lifecycle management for database connections

Frontend Updates:
- Updated assignments tab to show implementation status
- Indicated backend endpoints are ready

Database ready: The existing device_assignments table is perfectly designed for this use case with support for farm hierarchy (shelf_id, rack_id, row_id, farm_id) and proper constraints.

Ready for Assignment: A user can now technically assign devices via API, but frontend assignment UI still needs full implementation.

Current Capability: Backend can now store and retrieve device assignments. Frontend can connect to HA and discover devices. Next step would be building the actual assignment interface in the frontend.
</info added on 2025-06-06T22:39:57.141Z>

## 4. Authentication System [pending]
### Dependencies: 3.2, 3.3
### Description: Implement secure authentication for both WebSocket and REST connections
### Details:
Develop authentication mechanisms including token management, credential storage, refresh token handling, and session maintenance across both connection types.

## 5. Error Handling and Recovery [pending]
### Dependencies: 3.2, 3.3, 3.4
### Description: Create robust error handling and recovery mechanisms
### Details:
Implement comprehensive error handling including connection failures, authentication errors, data validation issues, and automatic recovery procedures with exponential backoff.

## 6. Background Processing System [pending]
### Dependencies: 3.5
### Description: Develop background task processing for asynchronous operations
### Details:
Create a background job system to handle long-running tasks, implement queuing mechanisms, and develop retry policies for failed background operations.

## 7. Caching Implementation [pending]
### Dependencies: 3.3, 3.5
### Description: Implement efficient caching for frequently accessed data
### Details:
Develop a caching layer using Redis or in-memory storage, implement cache invalidation strategies, and create mechanisms for dynamically adjusting cache policies based on usage patterns.

## 8. Integration Testing [pending]
### Dependencies: 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7
### Description: Create comprehensive test suite for the integration
### Details:
Develop integration tests covering all components, implement performance benchmarks to measure efficiency, create mocks for external dependencies, and establish continuous integration pipeline.

## 9. Frontend Integrations UI [done]
### Dependencies: 3.1
### Description: Create frontend components and pages for the Home Assistant integration feature
### Details:
Implement a comprehensive integrations page where users can:
1. Add/configure Home Assistant connection
2. View discovered devices and their current states  
3. Assign devices to farm rows, racks, and shelves
4. Control devices manually (on/off switches)
5. View real-time device status updates via WebSocket
<info added on 2025-06-06T22:13:38.317Z>
Now that the frontend implementation is complete, we need to develop comprehensive integration tests for the Home Assistant integration. Based on best practices for integration testing:

1. Create unit tests that verify the integration's core functionality without interacting with integration details directly
2. Implement snapshot testing for complex outputs like entity states, registry entries, and diagnostic dumps
3. Use realistic test data that mimics actual Home Assistant device responses and states
4. Focus on critical integration points including:
   - Connection setup and authentication
   - Device discovery and listing
   - Real-time WebSocket subscriptions and updates
   - Device assignment to farm locations
   - Manual device control operations
5. Ensure tests cover error handling, edge cases, and recovery scenarios
6. Follow Home Assistant's integration quality scale guidelines for gold-tier integrations
7. Document testing procedures and troubleshooting steps for future developers
</info added on 2025-06-06T22:13:38.317Z>

