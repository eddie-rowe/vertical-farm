# Task ID: 5
# Title: Grow Recipe Management System
# Status: pending
# Dependencies: 1
# Priority: medium
# Description: Develop a system for defining and managing grow recipes including grow days, light duration, watering frequency, and other parameters.
# Details:
1. Design database schema for grow recipes:
   ```sql
   CREATE TABLE species (
     id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
     name TEXT NOT NULL UNIQUE,
     description TEXT
   );
   
   CREATE TABLE grow_recipes (
     id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
     species_id UUID REFERENCES species(id),
     name TEXT NOT NULL,
     recipe_source TEXT,
     seed_density_dry NUMERIC(6,2),
     avg_tray_yield NUMERIC(6,2),
     germination_days INTEGER,
     light_days INTEGER,
     total_grow_days INTEGER,
     top_coat TEXT,
     pythium_risk TEXT,
     water_intake NUMERIC(6,2),
     water_frequency TEXT,
     lighting JSONB,
     fridge_storage_temp NUMERIC(4,1),
     difficulty TEXT,
     custom_parameters JSONB,
     created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
     updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
   );
   ```
2. Create UI components for recipe management:
   - SpeciesForm
   - RecipeEditor with fields for all grow parameters
   - RecipeList
   - RecipeDetailView
   - GrowParametersPage for navigating and managing recipes
3. Implement CRUD operations for recipes via FastAPI endpoints
4. Add recipe versioning to track changes
5. Create recipe duplication functionality
6. Implement recipe parameter validation
7. Add recipe search and filtering capabilities
8. Implement functionality to select recipes when starting a new grow for a rack/shelf

# Test Strategy:
Unit tests for recipe validation and component rendering. Integration tests for recipe CRUD operations. Test recipe versioning to ensure history is maintained. Verify custom parameters are properly stored and retrieved. Test recipe duplication functionality. Verify all grow parameters (species, seed density, germination days, etc.) are correctly stored, retrieved, and displayed. Test the selection of recipes when starting a new grow.

# Subtasks:
## 1. Schema Design for Recipe Management [done]
### Dependencies: None
### Description: Create a comprehensive data model that handles the complexity of recipe structures while reducing data duplication
### Details:
Design database schema that includes tables for recipes, species, and all required grow parameters. Schema should include fields for: species, recipe_source, seed_density_dry, avg_tray_yield, germination_days, light_days, total_grow_days, top_coat, pythium_risk, water_intake, water_frequency, lighting, fridge_storage_temp, and difficulty. Consider hierarchical recipe structures, inheritance patterns, and version control requirements. Include metadata fields for tracking creation, modification, and approval workflows.
<info added on 2025-05-24T20:52:29.184Z>
Database schema analysis complete. Need to create a migration to extend the existing `grow_recipes` table in Supabase with the following additional fields:

- recipe_source (Text): Track origin of recipe data
- germination_days (Integer): Days required for germination phase
- light_days (Integer): Days requiring light exposure
- total_grow_days (Integer): May be calculated or separate from existing grow_days
- top_coat (Text/Boolean): Whether top coating is used
- pythium_risk (Text): Risk level for pythium infection
- water_intake (Numeric): Total water consumption
- water_frequency (Text): Descriptive water frequency pattern
- lighting (JSONB): Complex lighting schedule parameters
- fridge_storage_temp (Numeric): Optimal refrigeration temperature
- difficulty (Text): Cultivation difficulty rating

Note: Existing fields `sowing_rate` and `average_yield` appear to correspond to required `seed_density_dry` and `avg_tray_yield` fields. Verify if these need renaming for consistency or can remain as is with proper documentation.
</info added on 2025-05-24T20:52:29.184Z>
<info added on 2025-05-24T20:53:43.679Z>
Migration file 20250524155256_add_grow_recipe_parameters.sql successfully implemented. The migration extends the grow_recipes table with all required parameters including recipe_source, germination_days, light_days, total_grow_days, top_coat, pythium_risk, water_intake, water_frequency, lighting (as JSONB), fridge_storage_temp, and difficulty. 

Key implementation features:
- Added appropriate data types and CHECK constraints for enum-like fields
- Created indexes for frequently queried fields (difficulty, pythium_risk, total_grow_days)
- Implemented PostgreSQL trigger to auto-calculate total_grow_days from germination_days + light_days when not explicitly set
- Added descriptive comments for each field
- Maintained backward compatibility with existing data

Confirmed that existing fields sowing_rate and average_yield correspond to the required seed_density_dry and avg_tray_yield fields respectively, so no renaming was necessary.
</info added on 2025-05-24T20:53:43.679Z>

## 2. UI Component Development [pending]
### Dependencies: 5.1
### Description: Develop user interface components for recipe creation, editing, and visualization
### Details:
Create reusable UI components for all grow parameters including species selection, seed density input, germination and light days settings, top coat options, pythium risk assessment, water intake and frequency controls, lighting configuration, storage temperature, and difficulty rating. Design a comprehensive 'Grow Parameters' page that allows users to view, add, edit, and delete grow recipes. Implement drag-and-drop functionality for recipe steps and responsive design for various devices. Ensure UI elements exist for inputting and displaying all required parameters.
<info added on 2025-05-24T23:28:56.977Z>
Implementation of the Grow Parameters feature has been successfully completed with the following components:

1. TypeScript Types (src/types/grow-recipes.ts):
   - Comprehensive type definitions for GrowRecipe, Species, CreateGrowRecipeInput
   - LightingSchedule interface for complex JSONB data
   - Filter and pagination types

2. Service Layer (src/services/growRecipeService.ts):
   - API service functions for species and grow recipes
   - CRUD operations with filtering and pagination support
   - Additional features: recipe duplication and compatibility checks

3. UI Components:
   - Badge component (src/components/ui/badge.tsx)
   - GrowRecipeCard (src/components/grow-recipes/GrowRecipeCard.tsx)
   - DeleteConfirmationDialog (src/components/grow-recipes/DeleteConfirmationDialog.tsx)
   - GrowRecipeForm (src/components/grow-recipes/GrowRecipeForm.tsx) with sections for:
     - Basic Information (name, species, source)
     - Growing Timeline (germination, light, total days)
     - Cultivation Parameters (seeding, watering, difficulty, pythium risk)
     - Environmental Ranges (temperature, humidity, pH, EC)

4. Main Page (src/app/grow-parameters/page.tsx):
   - Search and filtering functionality
   - Responsive grid layout for recipe cards
   - Integration with form dialogs

Key features implemented include parameter input fields, search/filtering by species/difficulty/pythium risk, inline species creation, Zod schema validation, responsive Tailwind CSS design, error handling with toast notifications, and auto-calculation of total grow days.
</info added on 2025-05-24T23:28:56.977Z>

## 3. CRUD API Implementation [pending]
### Dependencies: 5.1
### Description: Develop comprehensive API endpoints for recipe management operations
### Details:
Implement RESTful API endpoints for creating, reading, updating, and deleting recipes and their components. Ensure endpoints can handle all grow parameters (species, recipe_source, seed_density_dry, avg_tray_yield, germination_days, light_days, total_grow_days, top_coat, pythium_risk, water_intake, water_frequency, lighting, fridge_storage_temp, and difficulty). Include endpoints for partial updates, bulk operations, and specialized recipe operations. Design API responses to include appropriate error handling and validation feedback.

## 4. Versioning System Implementation [pending]
### Dependencies: 5.1, 5.3
### Description: Create a robust versioning system to track recipe changes over time
### Details:
Implement version control for recipes that tracks all changes, allows comparison between versions, and supports rollback functionality. Design a branching model for recipe development workflows. Include audit trails that capture who made changes and when.

## 5. Recipe Duplication and Template System [pending]
### Dependencies: 5.3, 5.4
### Description: Develop functionality for recipe duplication, templates, and inheritance
### Details:
Create systems for duplicating recipes while maintaining references, developing recipe templates, and implementing inheritance patterns for recipe variations. Include functionality to track relationships between original recipes and derivatives. Design mechanisms to propagate changes from base recipes to derivatives when appropriate.

## 6. Validation Framework Development [pending]
### Dependencies: 5.1, 5.3
### Description: Implement comprehensive validation for recipes and their components
### Details:
Create validation rules for all grow parameters including species, seed density, germination days, light days, water intake, etc. Implement business logic validation for recipe feasibility, cost calculations, and regulatory compliance. Design a flexible validation framework that can be extended for different product types and growing processes.

## 7. Search and Filtering System [pending]
### Dependencies: 5.1, 5.3
### Description: Develop advanced search and filtering capabilities for recipe management
### Details:
Implement full-text search across recipe components, advanced filtering by species, difficulty, grow days, and other parameters. Create saved search functionality and personalized views. Design efficient indexing strategies for large recipe databases and implement faceted search capabilities.

## 8. Recipe Selection for Grow Operations [pending]
### Dependencies: 5.2, 5.3
### Description: Implement functionality to select recipes when starting a new grow
### Details:
Develop interface and backend functionality that allows users to select from saved grow recipes when starting a new grow for a rack/shelf. Create a seamless workflow that applies the selected recipe's parameters to the new grow operation. Include validation to ensure the selected recipe is compatible with the target growing environment.

