# Task ID: 4
# Title: Device Assignment UI
# Status: pending
# Dependencies: 2, 3
# Priority: medium
# Description: Create a UI for mapping Home Assistant entities (lights, solenoids, pumps, fans, sensors) to their physical locations in the farm layout.
# Details:
1. Create database schema for device assignments:
   ```sql
   CREATE TABLE device_assignments (
     id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
     shelf_id UUID REFERENCES shelves(id) ON DELETE CASCADE,
     entity_id TEXT NOT NULL,
     entity_type TEXT NOT NULL,
     friendly_name TEXT,
     created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
   );
   ```
2. Develop UI components:
   - EntityBrowser (displays available Home Assistant entities)
   - EntityAssignmentForm (assigns entity to farm location)
   - LocationEntityList (shows entities assigned to a location)
3. Implement drag-and-drop interface for assigning entities to shelves
4. Add entity filtering by type (sensor, switch, light, etc.)
5. Create FastAPI endpoints for device assignment operations
6. Add validation to prevent duplicate assignments
7. Implement entity search functionality
8. Add visual indicators for assigned vs. unassigned entities

# Test Strategy:
Unit tests for UI components and validation logic. Integration tests for assignment operations with Supabase. E2E tests for the complete assignment workflow. Verify assignments persist after page refresh. Test error handling for invalid assignments.

# Subtasks:
## 1. Design and Create Database Schema [pending]
### Dependencies: None
### Description: Define and implement the backend schema to support entities, assignments, and relationships required for the UI and drag-and-drop logic.
### Details:
Include tables/models for entities, assignments, and any metadata needed for filtering and validation.

## 2. Develop API Endpoints [pending]
### Dependencies: 4.1
### Description: Implement RESTful or GraphQL API endpoints to support CRUD operations for entities, assignments, and search/filtering.
### Details:
Endpoints should allow fetching, creating, updating, and deleting entities and assignments, as well as supporting search and filter queries.

## 3. Build Core UI Components [pending]
### Dependencies: None
### Description: Develop reusable UI components for displaying entities, assignment lists, and interactive elements.
### Details:
Components include entity cards, assignment containers, filter controls, and search bars.

## 4. Implement Drag-and-Drop Assignment Logic [pending]
### Dependencies: 4.2, 4.3
### Description: Enable drag-and-drop functionality for assigning entities, ensuring real-time updates and visual feedback.
### Details:
Integrate with backend APIs to persist assignments and update UI state accordingly.

## 5. Add Entity Filtering Functionality [pending]
### Dependencies: 4.2, 4.3
### Description: Implement UI and backend logic to filter entities based on user-selected criteria.
### Details:
Support filtering by attributes such as type, status, or custom tags.

## 6. Integrate Search Functionality [pending]
### Dependencies: 4.2, 4.3
### Description: Develop search features to allow users to quickly find entities or assignments.
### Details:
Include debounced search input, backend query support, and result highlighting.

## 7. Implement Validation Logic [pending]
### Dependencies: 4.2, 4.4
### Description: Add validation rules for assignments and entity interactions, both on the frontend and backend.
### Details:
Ensure only valid assignments can be made and provide user feedback for invalid actions.

## 8. Develop Visual Indicators and Feedback [pending]
### Dependencies: 4.4, 4.7
### Description: Create visual cues for assignment status, validation errors, and drag-and-drop interactions.
### Details:
Include color changes, icons, tooltips, and animations to enhance user experience.

