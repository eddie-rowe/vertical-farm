---
description: Import organization and path resolution standards for better code maintainability
globs: src/**/*.ts, src/**/*.tsx
alwaysApply: true
---

# Import Organization

## **Import Order (Required)**
1. **External libraries** (React, Next.js, third-party packages)
2. **Internal services** (from `@/services/`)
3. **Internal types** (from `@/types/`)
4. **Internal components** (from `@/components/`)
5. **Relative imports** (`./`, `../`)

```typescript
// ✅ DO: Proper import order
'use client';

import React, { useState, useEffect } from 'react';
import { toast } from 'react-hot-toast';

import { FarmService } from '@/services/domain/farm/FarmService';
import { HomeAssistantWebSocketService } from '@/services/domain/integrations/HomeAssistantWebSocketService';

import { Farm, Row } from '@/types/farm/layout';
import { HADevice } from '@/types/homeassistant';

import { Button } from '@/components/ui/Button';
import { Modal } from '@/components/ui/Modal';

import './styles.css';

// ❌ DON'T: Random import order
import { Farm } from '@/types/farm/layout';
import React from 'react';
import { FarmService } from '@/services/domain/farm/FarmService';
import './styles.css';
import { Button } from '@/components/ui/Button';
```

## **Path Resolution**
- **ALWAYS use absolute imports** with `@/` prefix for internal modules
- **Use relative imports** only for co-located files in same directory
- **Avoid deep relative paths** (`../../../`)

```typescript
// ✅ DO: Use absolute imports
import { FarmService } from '@/services/domain/farm/FarmService';
import { Farm } from '@/types/farm/layout';

// ✅ DO: Relative imports for co-located files
import './ComponentStyles.css';
import { ComponentHelper } from './ComponentHelper';

// ❌ DON'T: Deep relative paths
import { FarmService } from '../../../services/domain/farm/FarmService';
```

## **Service Import Patterns**
- **Static imports** for frequently used services
- **Dynamic imports** for occasionally used services or performance optimization

```typescript
// ✅ DO: Static imports for main services
import { FarmService } from '@/services/domain/farm/FarmService';

const farmService = FarmService.getInstance();

// ✅ DO: Dynamic imports for conditional usage
const handleDelete = async () => {
  const rackService = (await import('@/services/domain/farm/RackService')).RackService.getInstance();
  await rackService.delete(id);
};

// ❌ DON'T: Import old service patterns
import { getFarms, deleteRack } from '@/services/farmService';
```

## **Type-Only Imports**
- **Use type-only imports** when importing only types/interfaces
- **Separate type imports** from value imports for clarity

```typescript
// ✅ DO: Type-only imports
import type { Farm, Row } from '@/types/farm/layout';
import type { ComponentProps } from 'react';

import { FarmService } from '@/services/domain/farm/FarmService';

// ❌ DON'T: Mix types with regular imports unnecessarily
import { Farm, Row, FarmService } from '@/types/farm/layout';
```

## **Re-export Patterns**
- **Use index files** for clean domain exports
- **Export from domain entry points** to simplify imports

```typescript
// ✅ DO: Domain index exports (src/services/domain/farm/index.ts)
export { FarmService } from './FarmService';
export { RowService } from './RowService';
export { RackService } from './RackService';
export type { Farm, Row, Rack } from './types';

// Usage:
import { FarmService, RowService } from '@/services/domain/farm';
```
