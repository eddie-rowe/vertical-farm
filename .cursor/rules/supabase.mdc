---
description: Database best practices focusing on Supabase
globs: src/db/**/*, supabase/**/*
---

# Supabase Integration Rules

## Core Principles

### 1. Service Layer First
- **MANDATORY**: All Supabase operations MUST go through the service layer
- **PROHIBITED**: Direct Supabase client calls in components
- Components use services: `SomeService.getInstance().method()`
- Services handle Supabase client creation and data operations

### 2. Modern Client Creation (@supabase/ssr)
- **REQUIRED**: Use `@supabase/ssr` package (NOT `@supabase/auth-helpers-nextjs`)
- **Browser Context**: `createBrowserClient` for client components
- **Server Context**: `createServerClient` for server components/actions
- **Cookie Handling**: Use `getAll()` and `setAll()` methods ONLY

## Client Creation Patterns

### Browser Client (Client Components)
```typescript
// utils/supabase/client.ts
import { createBrowserClient } from '@supabase/ssr'
import type { Database } from '@/types/database'

export function createClient() {
  return createBrowserClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )
}
```

### Server Client (Server Components/Actions)
```typescript
// utils/supabase/server.ts
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'
import type { Database } from '@/types/database'

export async function createClient() {
  const cookieStore = await cookies()

  return createServerClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll()
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            )
          } catch {
            // setAll called from Server Component - ignore if middleware refreshes sessions
          }
        }
      }
    }
  )
}
```

### Middleware Client (Session Management)
```typescript
// utils/supabase/middleware.ts
import { createServerClient } from '@supabase/ssr'
import { NextResponse, type NextRequest } from 'next/server'
import type { Database } from '@/types/database'

export async function updateSession(request: NextRequest) {
  let supabaseResponse = NextResponse.next({ request })

  const supabase = createServerClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return request.cookies.getAll()
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value }) => request.cookies.set(name, value))
          supabaseResponse = NextResponse.next({ request })
          cookiesToSet.forEach(({ name, value, options }) =>
            supabaseResponse.cookies.set(name, value, options)
          )
        }
      }
    }
  )

  // CRITICAL: Always call getUser() for secure session validation
  const { data: { user } } = await supabase.auth.getUser()
  
  // Redirect logic here...
  return supabaseResponse
}
```

## Service Integration Patterns

### Service Client Creation
```typescript
// In BaseService or specific services
export class SomeService extends BaseCRUDService<SomeEntity> {
  private async getSupabaseClient() {
    if (typeof window !== 'undefined') {
      // Browser context
      const { createClient } = await import('@/utils/supabase/client')
      return createClient()
    } else {
      // Server context
      const { createClient } = await import('@/utils/supabase/server')
      return await createClient()
    }
  }

  async getData() {
    const supabase = await this.getSupabaseClient()
    const { data, error } = await supabase.from('table').select()
    return this.handleResult(data, error)
  }
}
```

### Component Usage (CORRECT)
```typescript
// ✅ CORRECT: Use service layer
export default function MyComponent() {
  const [data, setData] = useState([])
  
  useEffect(() => {
    const loadData = async () => {
      const service = SomeService.getInstance()
      const result = await service.getData()
      setData(result)
    }
    loadData()
  }, [])
}
```

### Component Usage (PROHIBITED)
```typescript
// ❌ WRONG: Direct Supabase calls in components
export default function MyComponent() {
  const supabase = createClient() // NEVER DO THIS
  // Direct Supabase operations - PROHIBITED
}
```

## Authentication Patterns

### Secure Authentication Checks
```typescript
// ✅ CORRECT: Use supabase.auth.getUser() for security
const { data: { user }, error } = await supabase.auth.getUser()
if (!user) {
  // Handle unauthenticated state
}
```

### Server Actions for Auth
```typescript
'use server'
import { createClient } from '@/utils/supabase/server'
import { revalidatePath } from 'next/cache'
import { redirect } from 'next/navigation'

export async function signIn(formData: FormData) {
  const supabase = await createClient()
  
  const { error } = await supabase.auth.signInWithPassword({
    email: formData.get('email') as string,
    password: formData.get('password') as string
  })
  
  if (error) {
    redirect('/error')
  }
  
  revalidatePath('/', 'layout')
  redirect('/dashboard')
}
```

### Row Level Security (RLS) Client-Side Filtering
```typescript
// Always apply user-based filters for RLS
const { data } = await supabase
  .from('user_data')
  .select()
  .eq('user_id', user.id) // REQUIRED for RLS
```

## Type Safety Requirements

### Generated Types Integration
```typescript
// types/database.ts - Generated from Supabase CLI
export interface Database {
  public: {
    Tables: {
      farms: {
        Row: Farm
        Insert: FarmInsert
        Update: FarmUpdate
      }
      // ... other tables
    }
  }
}

// Use in services
export class FarmService extends BaseCRUDService<Farm> {
  protected async getClient() {
    const supabase = await this.getSupabaseClient()
    return supabase.from('farms')
  }
}
```

### Environment Variables
```typescript
// Required environment variables
NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_anon_key
SUPABASE_SERVICE_ROLE_KEY=your_service_role_key (server-only)
```

## Error Handling

### Service-Level Error Handling
```typescript
export class BaseSupabaseService {
  protected handleSupabaseError(error: any): never {
    if (error?.code === 'PGRST301') {
      throw new ValidationError('Row Level Security violation')
    }
    if (error?.code === '23505') {
      throw new ValidationError('Duplicate entry')
    }
    throw new ServiceError('Database operation failed', error)
  }
}
```

## Real-time Patterns

### Service-Managed Subscriptions
```typescript
export class RealtimeService extends BaseRealtimeService {
  async subscribeToTable(table: string, callback: (payload: any) => void) {
    const supabase = await this.getSupabaseClient()
    
    const subscription = supabase
      .channel(`${table}_changes`)
      .on('postgres_changes', 
        { event: '*', schema: 'public', table },
        callback
      )
      .subscribe()
      
    return () => subscription.unsubscribe()
  }
}
```

## Migration from auth-helpers-nextjs

### DEPRECATED - DO NOT USE
```typescript
// ❌ DEPRECATED - Remove all instances
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs'
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'
```

### MODERN - USE THESE
```typescript
// ✅ MODERN - Use these patterns
import { createBrowserClient, createServerClient } from '@supabase/ssr'
import { createClient } from '@/utils/supabase/client'
import { createClient } from '@/utils/supabase/server'
```

## Middleware Configuration

### Required middleware.ts
```typescript
import { updateSession } from '@/utils/supabase/middleware'
import type { NextRequest } from 'next/server'

export async function middleware(request: NextRequest) {
  return await updateSession(request)
}

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)'
  ]
}
```

## Performance Optimization

### Caching with Next.js 15
```typescript
// Use with "use cache" directive for cached data
"use cache"
export async function getCachedFarmData(farmId: string) {
  const service = FarmService.getInstance()
  return await service.getFarm(farmId)
}
```

### Service-Level Caching
```typescript
export class CachedService extends BaseService {
  @cache
  async getStaticData() {
    const supabase = await this.getSupabaseClient()
    return await supabase.from('static_data').select()
  }
}
```

## Security Best Practices

1. **Authentication**: Always use `supabase.auth.getUser()` for secure checks
2. **RLS Enforcement**: Apply user-based filters in all queries
3. **Environment Variables**: Keep service role keys server-side only
4. **Session Management**: Use middleware for session refresh
5. **Type Safety**: Use generated database types
6. **Service Layer**: Never bypass service layer for Supabase operations

## Testing Patterns

### Service Testing with Supabase
```typescript
describe('FarmService', () => {
  beforeEach(() => {
    // Mock Supabase client
    vi.mock('@/utils/supabase/server')
  })
  
  it('should fetch farm data through service', async () => {
    const service = FarmService.getInstance()
    const result = await service.getFarm('farm-id')
    expect(result).toBeDefined()
  })
})
```

## Common Pitfalls to Avoid

1. **Direct Component Access**: Never call Supabase directly in components
2. **Wrong Client Type**: Don't use browser client on server or vice versa
3. **Cookie Mismanagement**: Only use `getAll()` and `setAll()` methods
4. **Session Checks**: Use `getUser()` not `getSession()` for security
5. **Missing RLS**: Always apply user-based filters for security
6. **Deprecated Packages**: Never use `@supabase/auth-helpers-nextjs` 
- Use proper migrations
- Implement proper versioning
- Handle errors properly
- Document schema properly
- Monitor database health 