---
description: Project structure, tech stack, and architectural decisions - reference for understanding overall system design
globs: "README.md, docs/**/*.md, ./*"
alwaysApply: false
---

# Project Overview - Vertical Farm Platform

## 🌱 Project Summary

A full-stack, AI-augmented platform for managing, simulating, and optimizing vertical farming operations. The platform combines modern web technologies with AI/automation agents to deliver a robust, extensible solution for smart agriculture.

## 🏗️ Technology Stack

### Frontend
- **Framework**: Next.js 15 (App Router, React 19)
- **Language**: TypeScript 4.x+
- **Styling**: Tailwind CSS 3.x
- **UI Components**: Shadcn UI
- **State Management**: React Context + Hooks
- **Database/Auth**: Supabase Client SDK (@supabase/ssr)
- **Real-time**: Supabase Realtime, WebSockets

### Backend
- **Framework**: FastAPI (Python 3.13.3)
- **Database**: Supabase (PostgreSQL)
- **Authentication**: JWT + Supabase Auth
- **Monitoring**: Datadog
- **API Documentation**: OpenAPI/Swagger

### Infrastructure
- **Containerization**: Docker & Docker Compose
- **CI/CD**: GitHub Actions
- **Deployment**: Render (production), Vercel (frontend)
- **Edge Computing**: Cloudflare Workers
- **Monitoring**: Datadog Agent

## 📁 Project Structure

```
vertical-farm/
├── frontend/                 # Next.js 15 application
│   ├── src/
│   │   ├── app/             # App Router pages and layouts
│   │   │   ├── (app)/       # Authenticated routes
│   │   │   ├── (auth)/      # Authentication routes
│   │   │   └── api/         # API routes
│   │   ├── components/      # React components
│   │   │   ├── features/    # Domain-specific components
│   │   │   ├── ui/          # Reusable UI components
│   │   │   └── layout/      # Layout components
│   │   ├── services/        # Service layer
│   │   │   ├── core/        # Base services, auth, utilities
│   │   │   └── domain/      # Domain-specific services
│   │   ├── types/           # TypeScript type definitions
│   │   ├── hooks/           # Custom React hooks
│   │   ├── context/         # React Context providers
│   │   └── utils/           # Utility functions
│   └── public/              # Static assets
│
├── backend/                 # FastAPI application
│   ├── app/
│   │   ├── api/v1/         # API versioning
│   │   │   └── endpoints/  # API endpoints
│   │   ├── crud/           # Data access layer
│   │   ├── models/         # Database models
│   │   ├── schemas/        # Pydantic schemas
│   │   ├── core/           # Core functionality
│   │   └── tests/          # Backend tests
│   └── requirements.txt    # Python dependencies
│
├── cloudflare/             # Edge computing
│   └── workers/            # Cloudflare Workers
│
├── agents/                 # AI/automation agents
├── docs/                   # Documentation
├── scripts/                # Utility scripts
└── .cursor/rules/          # Cursor AI rules (this directory)
```

## 🎯 Key Architectural Decisions

### 1. Service Layer Architecture
- **Mandatory**: All data operations go through service layer
- **Pattern**: Singleton services extending base classes
- **Benefits**: Centralized error handling, consistent patterns, testability

### 2. Modern Authentication
- **Package**: `@supabase/ssr` (NOT `@supabase/auth-helpers-nextjs`)
- **Pattern**: Context-aware client creation (browser vs server)
- **Security**: JWT validation, Row Level Security (RLS)

### 3. App Router & React 19
- **Routing**: Next.js 15 App Router with route groups
- **Components**: Server Components by default, Client Components when needed
- **Features**: Streaming SSR, React Suspense, Server Actions

### 4. Real-time Architecture
- **WebSockets**: Supabase Realtime for live updates
- **Pattern**: Service-mediated subscriptions
- **Use Cases**: Sensor data, device status, notifications

### 5. Performance First
- **Caching**: Next.js 15 "use cache" directive
- **Loading**: Code splitting, lazy loading, dynamic imports
- **Optimization**: Bundle optimization, image optimization

## 🚀 Development Workflow

### Local Development
```bash
# Frontend
cd frontend && npm run dev

# Backend
cd backend && uvicorn app.main:app --reload

# Full stack with Docker
docker-compose up
```

### Testing
- **Frontend**: Vitest (unit), Playwright (E2E)
- **Backend**: Pytest (unit/integration)
- **Coverage**: Minimum 80% for critical paths

### Deployment
- **Frontend**: Vercel (automatic from main branch)
- **Backend**: Render (GitHub Actions workflow)
- **Database**: Supabase Cloud

## 📋 Coding Standards

### General Principles
1. **Type Safety**: TypeScript/Python type hints everywhere
2. **Error Handling**: Handle at service layer, display in UI
3. **Code Organization**: Domain-driven, feature-based structure
4. **Documentation**: Self-documenting code, minimal comments
5. **Testing**: Write tests for all business logic

### Naming Conventions
- **TypeScript**: camelCase (functions/variables), PascalCase (types/components)
- **Python**: snake_case (functions/variables), PascalCase (classes)
- **Files**: kebab-case for directories, PascalCase for components
- **Database**: snake_case for tables/columns

### Git Workflow
- **Branches**: `feature/`, `fix/`, `chore/` prefixes
- **Commits**: Conventional commits (feat:, fix:, docs:, etc.)
- **PRs**: Required reviews, CI must pass

## 🔗 Related Documentation

- **Frontend Details**: See [02-frontend-architecture.mdc](mdc:.cursor/rules/02-frontend-architecture.mdc)
- **Backend Details**: See [03-backend-architecture.mdc](mdc:.cursor/rules/03-backend-architecture.mdc)
- **Service Patterns**: See [10-service-layer.mdc](mdc:.cursor/rules/10-service-layer.mdc)
- **Testing Strategy**: See [04-testing-strategy.mdc](mdc:.cursor/rules/04-testing-strategy.mdc)
description:
globs:
alwaysApply: false
---
