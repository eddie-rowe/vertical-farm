---
description: Service layer architecture patterns following the established layered service design
globs: src/services/**/*.ts, src/components/**/*.tsx
alwaysApply: true
---

# Service Layer Architecture

## **Service Class Structure**
- **ALL services MUST extend appropriate base classes:**
  ```typescript
  // ✅ DO: Extend BaseCRUDService for data entities
  export class FarmService extends BaseCRUDService<Farm> {
    protected readonly tableName = 'farms';
    private static instance: FarmService;
  }

  // ✅ DO: Extend BaseRealtimeService for WebSocket/real-time services
  export class HomeAssistantWebSocketService extends BaseRealtimeService {
    private static instance: HomeAssistantWebSocketService;
  }

  // ❌ DON'T: Create services without base classes
  export class DirectSupabaseService {
    async getData() { /* direct supabase calls */ }
  }
  ```

## **Singleton Pattern (Required)**
- **ALL services MUST implement singleton pattern:**
  ```typescript
  // ✅ DO: Implement proper singleton
  export class RowService extends BaseCRUDService<Row> {
    private static instance: RowService;

    private constructor() {
      super();
    }

    static getInstance(): RowService {
      if (!RowService.instance) {
        RowService.instance = new RowService();
      }
      return RowService.instance;
    }
  }

  // ❌ DON'T: Export service instances directly
  export const rowService = new RowService();
  ```

## **Service Organization**
- **Core services** → `src/services/core/`
  - Base classes, auth, error handling, utilities
- **Domain services** → `src/services/domain/{domain}/`
  - Farm entities, business logic, integrations
- **Legacy services** → Mark for migration, avoid new usage

## **Component Service Usage**
- **ALWAYS use getInstance() pattern:**
  ```typescript
  // ✅ DO: Use singleton instances
  const farmService = FarmService.getInstance();
  const farms = await farmService.getAll();

  // ✅ DO: Dynamic imports for performance
  const rackService = (await import('@/services/domain/farm/RackService')).RackService.getInstance();

  // ❌ DON'T: Direct service imports in components
  import { getFarms } from '@/services/farmService';
  ```

## **Supabase Client Integration**
- **Services MUST handle Supabase client creation:**
  ```typescript
  // ✅ DO: Context-aware client creation in BaseService
  export abstract class BaseService {
    protected async getSupabaseClient() {
      if (typeof window !== 'undefined') {
        // Browser context
        const { createClient } = await import('@/utils/supabase/client')
        return createClient()
      } else {
        // Server context
        const { createClient } = await import('@/utils/supabase/server')
        return await createClient()
      }
    }
  }

  // ✅ DO: Use in BaseCRUDService methods
  export abstract class BaseCRUDService<T extends BaseEntity> extends BaseService {
    async getAll(): Promise<T[]> {
      const supabase = await this.getSupabaseClient()
      const { data, error } = await supabase.from(this.tableName).select()
      return this.handleResult(data, error)
    }
  }

  // ❌ DON'T: Direct Supabase client creation
  export class WrongService {
    async getData() {
      const supabase = createClient() // Wrong - no context awareness
    }
  }
  ```

## **Error Handling**
- **Services handle errors automatically** - don't wrap in try/catch
- **Use built-in validation methods** from BaseService
- **Custom validation** goes in `validateCreateData()` and `validateUpdateData()`
- **Error boundaries integration:** Services throw typed errors for proper UI error handling

## **Type Safety**
- **Service types** → `src/services/domain/{domain}/types.ts`
- **Interface inheritance** → Extend `BaseEntity` for all entities
- **Generic constraints** → Use proper TypeScript generics in base classes

## **Migration Strategy**
- **Replace old service functions** with new service classes
- **Update all import statements** to use new patterns
- **Remove legacy service files** after migration complete
- **Update tests** to use new service instances
