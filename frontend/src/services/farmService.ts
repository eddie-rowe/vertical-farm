'use client';
import { supabase } from '../supabaseClient';

// Define the type for Farm data based on your schema
// Adjust this based on your actual farms table structure in database-schema.md
export interface Farm {
  id?: string; // UUID, usually generated by Supabase, optional for creation
  name: string;
  location?: string | null;
  // manager_id is usually set server-side on creation, not directly by client for createFarm
  // manager_id?: string | null; 
  created_at?: string; // TIMESTAMPTZ
  updated_at?: string; // TIMESTAMPTZ
}

// Enum for PermissionLevel, matching backend
export enum PermissionLevel {
  VIEWER = 'viewer',
  EDITOR = 'editor',
  MANAGER = 'manager',
}

// Interface for UserPermission data, matching backend UserPermission model
export interface UserPermission {
  id: string; // UUID
  farm_id: string; // UUID
  user_id: string; // UUID
  permission: PermissionLevel;
  created_at: string; // TIMESTAMPTZ
  updated_at: string; // TIMESTAMPTZ
}

// Interface for creating a new permission
export interface UserPermissionCreatePayload {
  farm_id: string;
  user_id: string;
  permission: PermissionLevel;
}

// Interface for updating an existing permission
export interface UserPermissionUpdatePayload {
  permission: PermissionLevel;
}

// const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';

// /**
//  * Helper function to get the authorization header.
//  */
// const getAuthHeader = async () => {
//   const session = (await supabase.auth.getSession()).data.session;
//   if (!session) {
//     throw new Error('User not authenticated.');
//   }
//   return {
//     'Authorization': `Bearer ${session.access_token}`,
//     'Content-Type': 'application/json',
//   };
// };

/**
 * Fetches all farms.
 * Relies on RLS policies for security.
 */
export const getFarms = async (): Promise<Farm[]> => {
  const { data, error } = await supabase.from('farms').select('*');
  if (error) {
    console.error('Error fetching farms direct from Supabase:', error);
    throw error;
  }
  return data || [];
};

/**
 * Fetches a single farm by its ID.
 * Relies on RLS policies for security.
 */
export const getFarmById = async (id: string): Promise<Farm | null> => {
  const { data, error } = await supabase.from('farms').select('*').eq('id', id).single();
  if (error) {
    console.error(`Error fetching farm ${id} direct from Supabase:`, error);
    throw error;
  }
  return data;
};

/**
 * Creates a new farm using Supabase directly.
 * @param farmData - The data for the new farm.
 */
export const createFarm = async (farmData: Omit<Farm, 'id' | 'created_at' | 'updated_at' | 'manager_id'>): Promise<Farm | null> => {
  const { data, error } = await supabase
    .from('farms')
    .insert([farmData])
    .select()
    .single();
  
  if (error) {
    console.error('Error creating farm via Supabase:', error);
    throw error;
  }
  
  return data;
};

/**
 * Updates an existing farm using Supabase directly.
 * @param id - The ID of the farm to update.
 * @param farmData - The partial data to update the farm with.
 */
export const updateFarm = async (id: string, farmData: Partial<Omit<Farm, 'id' | 'created_at' | 'manager_id'>>): Promise<Farm | null> => {
  const payload = { ...farmData };
  if ('updated_at' in payload) {
    delete (payload as Partial<Farm>).updated_at;
  }
  
  const { data, error } = await supabase
    .from('farms')
    .update(payload)
    .eq('id', id)
    .select()
    .single();
  
  if (error) {
    console.error(`Error updating farm ${id} via Supabase:`, error);
    throw error;
  }
  
  return data;
};

/**
 * Deletes a farm by its ID using Supabase directly.
 * @param id - The ID of the farm to delete.
 */
export const deleteFarm = async (id: string): Promise<void> => {
  const { error } = await supabase
    .from('farms')
    .delete()
    .eq('id', id);
  
  if (error) {
    console.error(`Error deleting farm ${id} via Supabase:`, error);
    throw error;
  }
};

// --- Farm User Permission Management ---
// User permissions are now handled through Supabase RLS policies
// and the main supabaseService.ts file. These FastAPI endpoints 
// have been deprecated in favor of the Supabase PostGREST migration. 