'use client'; // Added 'use client' as this service now relies on apiClient which is client-side
import { supabase } from '../supabaseClient';
import apiClient from '../lib/apiClient'; // Adjusted path assuming services is sibling to lib

// Define the type for Farm data based on your schema
// Adjust this based on your actual farms table structure in database-schema.md
export interface Farm {
  id?: string; // UUID, usually generated by Supabase, optional for creation
  name: string;
  location?: string | null;
  // manager_id is usually set server-side on creation, not directly by client for createFarm
  // manager_id?: string | null; 
  created_at?: string; // TIMESTAMPTZ
  updated_at?: string; // TIMESTAMPTZ
}

// Enum for PermissionLevel, matching backend
export enum PermissionLevel {
  VIEWER = 'viewer',
  EDITOR = 'editor',
  MANAGER = 'manager',
}

// Interface for UserPermission data, matching backend UserPermission model
export interface UserPermission {
  id: string; // UUID
  farm_id: string; // UUID
  user_id: string; // UUID
  permission: PermissionLevel;
  created_at: string; // TIMESTAMPTZ
  updated_at: string; // TIMESTAMPTZ
}

// Interface for creating a new permission
export interface UserPermissionCreatePayload {
  farm_id: string;
  user_id: string;
  permission: PermissionLevel;
}

// Interface for updating an existing permission
export interface UserPermissionUpdatePayload {
  permission: PermissionLevel;
}

// const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';

// /**
//  * Helper function to get the authorization header.
//  */
// const getAuthHeader = async () => {
//   const session = (await supabase.auth.getSession()).data.session;
//   if (!session) {
//     throw new Error('User not authenticated.');
//   }
//   return {
//     'Authorization': `Bearer ${session.access_token}`,
//     'Content-Type': 'application/json',
//   };
// };

/**
 * Fetches all farms.
 * Relies on RLS policies for security.
 */
export const getFarms = async (): Promise<Farm[]> => {
  const { data, error } = await supabase.from('farms').select('*');
  if (error) {
    console.error('Error fetching farms direct from Supabase:', error);
    throw error;
  }
  return data || [];
};

/**
 * Fetches a single farm by its ID.
 * Relies on RLS policies for security.
 */
export const getFarmById = async (id: string): Promise<Farm | null> => {
  const { data, error } = await supabase.from('farms').select('*').eq('id', id).single();
  if (error) {
    console.error(`Error fetching farm ${id} direct from Supabase:`, error);
    throw error;
  }
  return data;
};

/**
 * Creates a new farm by calling the backend API.
 * @param farmData - The data for the new farm.
 */
export const createFarm = async (farmData: Omit<Farm, 'id' | 'created_at' | 'updated_at' | 'manager_id'>): Promise<Farm | null> => {
  try {
    return await apiClient<Farm>(`/api/v1/farms/`, {
      method: 'POST',
      body: JSON.stringify(farmData),
      // useAuth is true by default in apiClient
    });
  } catch (error) {
    console.error('Error in createFarm service:', error);
    throw error; // Re-throw the error from apiClient for the caller to handle
  }
};

/**
 * Updates an existing farm by calling the backend API.
 * @param id - The ID of the farm to update.
 * @param farmData - The partial data to update the farm with.
 */
export const updateFarm = async (id: string, farmData: Partial<Omit<Farm, 'id' | 'created_at' | 'manager_id'>>): Promise<Farm | null> => {
  try {
    const payload = { ...farmData };
    if ('updated_at' in payload) {
        delete (payload as Partial<Farm>).updated_at;
    }
    return await apiClient<Farm>(`/api/v1/farms/${id}`, {
      method: 'PUT',
      body: JSON.stringify(payload),
    });
  } catch (error) {
    console.error(`Error in updateFarm service for id ${id}:`, error);
    throw error;
  }
};

/**
 * Deletes a farm by its ID by calling the backend API.
 * @param id - The ID of the farm to delete.
 */
export const deleteFarm = async (id: string): Promise<void> => {
  try {
    await apiClient<void>(`/api/v1/farms/${id}`, {
      method: 'DELETE',
    });
  } catch (error) {
    console.error(`Error in deleteFarm service for id ${id}:`, error);
    throw error;
  }
};

// --- Farm User Permission Management ---

/**
 * Fetches all user permissions for a specific farm.
 * @param farmId - The ID of the farm.
 */
export const getFarmUserPermissions = async (farmId: string): Promise<UserPermission[]> => {
  try {
    return await apiClient<UserPermission[]>(`/api/v1/user-permissions/${farmId}`, {
      method: 'GET',
    });
  } catch (error) {
    console.error(`Error in getFarmUserPermissions service for farm ${farmId}:`, error);
    throw error;
  }
};

/**
 * Adds a user permission to a farm.
 * @param permissionData - The data for the new permission.
 */
export const addUserPermissionToFarm = async (permissionData: UserPermissionCreatePayload): Promise<UserPermission | null> => {
  try {
    return await apiClient<UserPermission>(`/api/v1/user-permissions/`, {
      method: 'POST',
      body: JSON.stringify(permissionData),
    });
  } catch (error) {
    console.error('Error in addUserPermissionToFarm service:', error);
    throw error;
  }
};

/**
 * Updates a user's permission on a farm.
 * @param farmId - The ID of the farm.
 * @param userId - The ID of the user whose permission is to be updated.
 * @param permissionUpdateData - The new permission level.
 */
export const updateFarmUserPermission = async (
  farmId: string, 
  userId: string, 
  permissionUpdateData: UserPermissionUpdatePayload
): Promise<UserPermission | null> => {
  try {
    return await apiClient<UserPermission>(`/api/v1/user-permissions/${farmId}/user/${userId}`, {
      method: 'PUT',
      body: JSON.stringify(permissionUpdateData),
    });
  } catch (error) {
    console.error(`Error in updateFarmUserPermission service for farm ${farmId}, user ${userId}:`, error);
    throw error;
  }
};

/**
 * Removes a user's permission from a farm.
 * @param farmId - The ID of the farm.
 * @param userId - The ID of the user whose permission is to be removed.
 */
export const removeUserPermissionFromFarm = async (farmId: string, userId: string): Promise<void> => {
  try {
    await apiClient<void>(`/api/v1/user-permissions/${farmId}/user/${userId}`, {
      method: 'DELETE',
    });
  } catch (error) {
    console.error(`Error in removeUserPermissionFromFarm service for farm ${farmId}, user ${userId}:`, error);
    throw error;
  }
}; 