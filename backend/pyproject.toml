[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "vertical-farm-backend"
version = "1.0.0"
description = "FastAPI backend for vertical farming management platform"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Eddie Rowe", email = "eddie.rowe@goodgoodgreens.org"}
]
keywords = ["fastapi", "vertical-farming", "agriculture", "iot", "supabase"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Scientific/Engineering :: Agriculture",
]

dependencies = [
    # Core FastAPI and Web Server
    "fastapi>=0.115.0,<0.116.0",
    "uvicorn[standard]>=0.34.0,<0.36.0",
    
    # Pydantic for data validation
    "pydantic>=2.11.0,<2.12.0",
    "pydantic[email]>=2.11.0,<2.12.0", 
    "pydantic-settings>=2.8.0,<2.9.0",
    
    # Supabase client and database
    "supabase>=2.12.0,<2.13.0",
    "postgrest>=0.19.0,<0.20.0",
    "gotrue>=2.11.0,<2.12.0",
    "realtime>=2.2.0,<2.3.0",
    "storage3>=0.11.0,<0.12.0",
    
    # Database drivers
    "psycopg2-binary>=2.9.0,<2.10.0",
    "asyncpg>=0.30.0,<0.31.0",
    
    # Authentication and Security
    "python-jose[cryptography]>=3.4.0,<3.5.0",
    "python-multipart>=0.0.20,<0.1.0",
    "passlib[bcrypt]>=1.7.0,<1.8.0",
    
    # HTTP and WebSocket clients
    "httpx>=0.27.0,<0.28.0",
    "aiohttp>=3.12.14",
    "websockets>=13.1,<14.0",
    
    # Environment and utilities
    "python-dotenv>=1.1.0,<1.2.0",
    "asyncio-throttle>=1.0.0,<1.1.0",
]

[project.optional-dependencies]
monitoring = [
    "datadog>=0.51.0,<0.52.0",
    "ddtrace>=3.9.0,<3.10.0",
]

test = [
    "pytest>=8.3.0,<8.4.0",
    "pytest-cov>=6.1.0,<6.2.0", 
    "pytest-asyncio>=0.26.0,<0.27.0",
    "pytest-mock>=3.14.0,<3.15.0",
    "pytest-xdist>=3.6.0,<3.7.0",  # For parallel test execution (-n auto)
    "pytest-timeout>=2.3.0,<2.4.0",  # For test timeouts
    "coverage[toml]>=7.0.0,<8.0.0",
]

dev = [
    # Code formatting and linting
    "black>=25.1.0,<26.0.0",
    "isort>=5.13.0,<5.14.0",
    "mypy>=1.16.0,<1.17.0",
    
    # Modern alternatives (optional)
    "ruff>=0.8.0,<0.9.0",
    
    # Development utilities
    "pre-commit>=4.0.0,<5.0.0",
    "ipython>=8.0.0,<9.0.0",
    "rich>=13.0.0,<14.0.0",
]

all = [
    "vertical-farm-backend[monitoring,test,dev]"
]

[project.scripts]
vertical-farm-dev = "app.main:app"

[project.urls]
Homepage = "https://github.com/eddie.rowe/vertical-farm"
Repository = "https://github.com/eddie.rowe/vertical-farm.git"
Issues = "https://github.com/eddie.rowe/vertical-farm/issues"

# Tool configurations

[tool.setuptools.packages.find]
where = ["."]
include = ["app*"]
exclude = ["tests*", "__pycache__*", "*.pyc"]

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["app", "tests"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "supabase.*",
    "postgrest.*", 
    "gotrue.*",
    "realtime.*",
    "storage3.*",
    "datadog.*",
    "ddtrace.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["app/tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short", 
    "--strict-markers",
    "--disable-warnings",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=25",
    "--asyncio-mode=auto",
    "-p", "no:warnings"
]
pythonpath = ["."]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "api: API endpoint tests", 
    "schemas: Schema validation tests",
    "critical: Critical functionality tests",
    "slow: Slow running tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/migrations/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError", 
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Ruff configuration (modern alternative to flake8, black, isort)
[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

[tool.ruff.lint.isort]
known-first-party = ["app"] 