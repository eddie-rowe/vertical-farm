Dear ChatGPT,

Please enhance the following PRD to give us the best chances for success when we give this to claude-task-master 


<context>

# Overview  
We are inheriting a codebase for an application called Hangar Direct that is like AirBnB for airplane hangars. 
We would like to better understand the architecture and then work to improve it.

# Core Goals  

1. Verify complete understanding of the existing codebase 
- System architecture
- Frontend architecture
- Backend architecture (API and database)
- Deployment site (Vercel)
 -Generare summary of architecture to reference for the rest of the project
2. Integrate CI/CD for:
- Local deployment/testing
- GitHub Actions pipeline ( a professional, yet minimalist workflow that ultimately deploys to to Vercel)
3. Implement instrumentation (metrics, logs, traces)
- Frontend
- API
- Database
4. Refactor the application as necessary to implement FastAPI
5. (Any other recommendations for project goals to enhance this application)


# User Experience  

## User Persona:   
- Software Developers: To enhance the experience of developing this application.

## Key User Flows:
- Dev makes a new branch of the codebase → makes changes to code → 
dev builds locally with docker compose → dev tests/verifies code change quality → 
dev pushes brach and creates a PR in github → PR runs through Github Actions workflow → app is pushed to Vercel
  
</context>

<PRD>

# Known Technical Architecture  

**System Components:** 
- **Frontend:** Next.js 15, React 19, Tailwind CSS v4, and Shadcn UI 2.5.0
- **Backend:** Python 3.13.3 with FastAPI 0.115.12 for API layer.
- **Core Engine:** Autogen AgentChat 0.5.6 to run agents (AssistantAgent class) and coordinate team interactions. 
- **Database:** Supabase for persistent storage of resources.  
- **Logging System:** Centralized logger tracking inputs, agent outputs, decisions, costs, token usage, etc.  
- **Triggers:** Cron scheduler, webhook server, and third-party integrations (e.g., Google Calendar).  
- **Import/Export:** JSON schemas defining all resources.


**Data Models:**  
- Agent, Team, Task, Prompt, Tool, Trigger, ConsensusMechanism, OutputFormat, LogEntry

**APIs and Integrations:**  
- RESTful API for CRUD operations  
- WebSocket or Server-Sent Events for live task updates  
- Plugin architecture for external tools and destinations

**Infrastructure Requirements:**  
- Containerized app using Docker


# Development Roadmap  

**MVP Requirements:**  
- User auth and dashboard
- Agent creation/configuration  
- Team creation with basic consensus mechanisms  
- Prompt/task creation and execution  
- Drag-and-drop editor with visual linking  
- Task execution and output display  
- Basic trigger system (manual + cron)  
- Export/Import functionality (JSON)  
- Centralized logging system

**Phase 2 – Orchestration Expansion:**  
- Tool configuration and execution  
- External trigger integrations (webhook, Google Calendar)  
- Output destinations (filesystem, database, API)  
- Additional team types and consensus models  
- Enhanced UI/UX polish and animations

**Phase 3 – Extensibility & Collaboration:**  
- Plugin marketplace for tools, outputs, and triggers  
- User collaboration features (teams, shared projects)  
- Multi-session state persistence and concurrent task execution  
- Visual replay of past workflows (log explorer)  

# Logical Dependency Chain  
1. User auth and UI shell  
2. Core data models and REST API for Agents, Tasks, Teams  
3. Canvas-based editor (basic version)  
4. Agent + Team config logic (backend + UI)  
5. Prompt/task execution using Autogen  
6. Output display and logging  
7. Export/import JSON engine  
8. Basic triggers (manual/cron)  
9. Consensus logic  
10. Tool execution logic  
11. Advanced triggers and outputs  
12. UI polish, testing, and extensibility layer

# Risks and Mitigations  
- **Complex Orchestration Logic:** Use modular, testable design to ensure each team type and consensus mechanism is implemented clearly.  
- **MVP Scope Creep:** Focus on manual and cron triggers first, then expand. Start with limited team types and add more after MVP.  
- **Frontend Complexity:** Use proven libraries (React Flow) and enforce component boundaries.  
- **Integration Complexity:** Design an extensible plugin system early to manage external tools/output complexity.  
- **Autogen Integration Risks:** Wrap Autogen in testable adapters and mock interfaces for early development.

# Appendix  
- Feel free to take inspiration from Microsoft's AutoGen Studio:
https://microsoft.github.io/autogen/stable/user-guide/autogenstudio-user-guide/index.html

</PRD>