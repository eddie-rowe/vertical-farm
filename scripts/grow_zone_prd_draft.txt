Great ‚Äî here's the updated PRD with **Home Assistant integration via API/WebSockets** added in the appropriate sections. I‚Äôve added it as an **optional control integration**, clearly scoped and framed to fit your new stack while maintaining interoperability with existing Home Assistant ecosystems.

---

## üîß Updated PRD: Vertical Farming Orchestration Platform

### üß† Technical Architecture

* **Frontend**:
  Built using **React** (with **Next.js**) to provide a responsive web interface for growers. Features include:

  * Dashboard for current system status and historical insights
  * Zone and schedule configuration UIs
  * Manual overrides and controls
  * Authentication and role-based access via Supabase Auth

* **Backend**:
  Developed using **FastAPI**, exposing RESTful and WebSocket endpoints to:

  * Manage configuration for controllers, zones, schedules, and sequences
  * Receive sensor data and device states
  * Trigger manual run commands or schedule overrides
  * Log activity and system history

* **Database**:
  Powered by **Supabase Postgres**, with real-time capabilities and row-level security for:

  * Controllers, zones, schedules, and historical execution logs
  * User configuration and access control
  * Device metadata (e.g., IP, type, last ping, error states)

* **Device Integration Layer**:
  Modular device drivers for:

  * **ESP32/ESPHome**, custom microcontroller boards
  * **Kasa smart plugs/switches**
  * **Home Assistant integration (NEW)** via:

    * **WebSocket API**: subscribe to entity state changes
    * **REST API**: trigger services (`turn_on`, `turn_off`, etc.)
    * Supports using existing Home Assistant setups as a unified device layer for relay control, climate feedback, and sensor ingestion

---

### üîå Home Assistant API Integration (New Section)

* **What it does**: Enables the platform to discover, monitor, and control devices registered in Home Assistant using its native APIs.

* **Why it‚Äôs important**: Many users already have sensors, relays, and automations in Home Assistant. This feature allows them to extend their farm automation workflows without duplicating device configuration.

* **How it works**:

  * **WebSocket API**: Subscribes to state updates for entities tagged as relevant (e.g., switches, sensors).
  * **REST API**: Sends service calls (`turn_on`, `turn_off`, `call_service`) to control lights, relays, and other actuators.
  * API credentials stored securely in Supabase (per user or installation).
  * Devices added through a Discovery UI or manually entered.

---

### üßë‚Äçüíª User Experience

* **User Personas** (unchanged, but now includes):

  * *Home Assistant Power User*: Wants seamless interaction between their existing Home Assistant automation and the vertical farm stack.

* **Key User Flows** (updated):

  * **Device Linking**: Add a new device by IP, local discovery, or Home Assistant entity selection.
  * **Manual Control**: Toggle relays or lighting using the platform‚Äôs UI or pass-through service calls to Home Assistant.
  * **Sensor Feedback**: Use Home Assistant sensors (e.g., humidity, temp) to drive dynamic rule adjustments.

---

### üì∂ APIs & Integration Overview (Updated)

| Integration Target                 | Method                               | Purpose                                                |
| ---------------------------------- | ------------------------------------ | ------------------------------------------------------ |
| Local Hardware (ESP32, Kasa, etc.) | Direct control via FastAPI endpoints | Watering, lighting, etc.                               |
| Home Assistant                     | REST & WebSocket                     | Monitor and control existing smart home devices        |
| Supabase                           | Postgres + Realtime                  | Configuration, history, authentication                 |
| Frontend (Next.js/React)           | Fetch/WebSockets                     | Real-time UI sync, status updates, schedule management |

---

### üî≠ Development Roadmap (Updated Highlights)

**Phase 2 ‚Äì Enhancements**

* ‚úÖ Add sequences/cycles and sun/cron schedule filters
* ‚úÖ Build React dashboard UI
* ‚úÖ Integrate **Home Assistant WebSocket and REST APIs** for optional external device control

**Phase 3 ‚Äì Advanced Features**

* Auto-adjust run times based on sensor inputs, including **those exposed from Home Assistant**
* Community plugin to import Home Assistant devices into the platform

---

Let me know if you‚Äôd like a diagram to show how the Home Assistant integration fits into the architecture ‚Äî or if you want auth scopes/API paths detailed out.
